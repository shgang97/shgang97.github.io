<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《Spark官方文档》——RDD编程指南</title>
    <link href="/posts/rdd-programming-guide-c153c7858690/"/>
    <url>/posts/rdd-programming-guide-c153c7858690/</url>
    
    <content type="html"><![CDATA[<p>RDD编程指南</p><ul><li><p><a href="#overview">概述</a></p></li><li><p><a href="#linking-with-spark">链接Spark</a></p></li><li><p>Initializing Spark</p><ul><li><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#using-the-shell">Using the Shell</a></li></ul></li><li><p>Resilient Distributed Datasets (RDDs)</p><ul><li><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#parallelized-collections">Parallelized Collections</a></p></li><li><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#external-datasets">External Datasets</a></p></li><li><p>RDD Operations</p><ul><li><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#basics">Basics</a></p></li><li><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#passing-functions-to-spark">Passing Functions to Spark</a></p></li><li><p>Understanding closures</p><ul><li><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#example">Example</a></li><li><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#local-vs-cluster-modes">Local vs. cluster modes</a></li><li><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#printing-elements-of-an-rdd">Printing elements of an RDD</a></li></ul></li><li><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#working-with-key-value-pairs">Working with Key-Value Pairs</a></p></li><li><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#transformations">Transformations</a></p></li><li><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#actions">Actions</a></p></li><li><p>Shuffle operations</p><ul><li><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#background">Background</a></li><li><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#performance-impact">Performance Impact</a></li></ul></li></ul></li><li><p>RDD Persistence</p><ul><li><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#which-storage-level-to-choose">Which Storage Level to Choose?</a></li><li><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#removing-data">Removing Data</a></li></ul></li></ul></li><li><p>Shared Variables</p><ul><li><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#broadcast-variables">Broadcast Variables</a></li><li><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#accumulators">Accumulators</a></li></ul></li><li><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#deploying-to-a-cluster">Deploying to a Cluster</a></p></li><li><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#launching-spark-jobs-from-java--scala">Launching Spark jobs from Java / Scala</a></p></li><li><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#unit-testing">Unit Testing</a></p></li><li><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#where-to-go-from-here">Where to Go from Here</a></p></li></ul><h1><a name="overview">概述</a></h1><p>在较高的层次上，每个Spark应用都包含一个驱动器程序（以下翻译简称为“驱动程序”或“程序”），用来运行用户的main函数，并在集群上执行各种并行操作。==弹性分布式数据集( <em>resilient distributed dataset</em>-RDD)==是Spark提供的一个主要抽象概念，RDD是一个可分区的元素集合，其中的元素分布在集群的各个节点上，并且可以并行操作。创建RDD可以通过HDFS（或者Hadoop支持的其他文件系统）上的文件，或者驱动程序中Scala集合对象，并对其进行转换。用户还可以使用Spark将RDD持久化到内存中，以便在并行操作中有效地复用。最后，rdd可以从节点故障中自动恢复数据。</p><p>Spark中的第二个抽象概念是可用于并行操作的==共享变量==。默认情况下，当Spark作为一组任务在不同的节点上并行运行一个函数时，它将函数中使用的每个变量的副本发送给每个任务。有时候，一个变量需要在任务之间共享，或者在任务和驱动程序之间共享。Spark支持两种类型的共享变量:广播变量(broadcast variable)和累加变量(accumulators)，前者可用于在所有节点的内存中缓存一个值，后者是只能“添加”的变量，如计数器和和。</p><p>本指南展示了每种Spark支持的语言中的这些特性。如果您启动Spark的交互式shell——对于Scala shell是bin/ Spark -shell，对于Python shell是bin/pyspark，这是最容易的。</p><h1><a name="linking-with-spark">链接Spark</a></h1><p>Spark 3.2.1 支持 lambda 表达式来简洁地编写函数，否则可以使用 org.apache.spark.api.java.function 包中的类。</p><p>请注意，在 Spark 2.2.0 中删除了对 Java 7 的支持。</p><p>要使用 Java 编写 Spark 应用程序，您需要添加对 Spark 的依赖项。Spark 可通过 Maven Central 在以下位置获得：</p>]]></content>
    
    
    <categories>
      
      <category>Spark</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spark</tag>
      
      <tag>Spark-RDD-Programming-Guide</tag>
      
      <tag>《Spark 官方文档》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>advance-java-tuning</title>
    <link href="/posts/advance-java-tuning-34da480e8450/"/>
    <url>/posts/advance-java-tuning-34da480e8450/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：</p><span id="more"></span><h3 id="JVM调优概述"><a href="#JVM调优概述" class="headerlink" title="JVM调优概述"></a>JVM调优概述</h3><p>JVM调优标志：布尔标志和附带参数标志</p><ul><li>布尔标志：-XX:+FlagName表示开启，-XX:-FlagName表示关闭</li><li>附带参数标志：-XX:FlagName=something，表示将flagName设置为something，其中something通常可以为任意值。例如 -XX:NewRatio=N，表示NewRatio可以设置为任意值N（N是我们讨论关注的重点）</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM Performance tuning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>graph-minimum-spanning-tree</title>
    <link href="/posts/graph-minimum-spanning-tree-c75337d77627/"/>
    <url>/posts/graph-minimum-spanning-tree-c75337d77627/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：</p><span id="more"></span><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>连接图G的所有顶点构成的边构成的树，且其总权重最下</p><ul><li>包含图中全部的n个顶点，边的条数为n-1</li><li>所欲生成树中总权值最下</li></ul><h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><h4 id="切分定理"><a href="#切分定理" class="headerlink" title="切分定理"></a>切分定理</h4><p>切分（Cut）：把图中的节点分为两部分，称为一个切分</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>图</category>
      
      <category>算法</category>
      
      <category>图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
      <tag>prim</tag>
      
      <tag>kruskal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>graph-topological-sort</title>
    <link href="/posts/graph-topological-sort-3e4db9b0d660/"/>
    <url>/posts/graph-topological-sort-3e4db9b0d660/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：AOV简介，拓扑排序的思路及实现</p><span id="more"></span><h3 id="AOV网（Activity-On-Vertex-Network）"><a href="#AOV网（Activity-On-Vertex-Network）" class="headerlink" title="AOV网（Activity On Vertex Network）"></a>AOV网（Activity On Vertex Network）</h3><p>在一个表示工程的有向图中，用顶点表示活动（Activity），用有向边表示活动之间的先后顺序，AOV网中不能出现环。</p><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>拓扑排序是对<strong>有向无环图</strong>的顶点的一种排序，使得如果存在一条从vi到vj的路径，那么排序中vj就出现在vi的后面</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul><li>从任意一个入度为0的顶点开始，将这个顶点及从这个顶点出发的边删除</li><li>重复上述操作，直到找不到入度为0的顶点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;K&gt; <span class="hljs-title function_">topologicalSort</span><span class="hljs-params">()</span> &#123;<br>    List&lt;K&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    Queue&lt;Vertex&lt;K, E&gt;&gt; zeroInDegreeQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    Map&lt;Vertex&lt;K, E&gt;, Integer&gt; inMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    vertices.forEach((k, v) -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (v.inEdges.size() == <span class="hljs-number">0</span>) &#123;<br>            zeroInDegreeQueue.offer(v);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            inMap.put(v, v.inEdges.size());<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-keyword">while</span> (!zeroInDegreeQueue.isEmpty()) &#123;<br>        Vertex&lt;K, E&gt; vertex = zeroInDegreeQueue.poll();<br>        list.add(vertex.key);<br>        vertex.outEdges.forEach(edge -&gt; &#123;<br>            inMap.put(edge.to, inMap.get(edge.to) - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (inMap.get(edge.to) == <span class="hljs-number">0</span>) &#123;<br>                zeroInDegreeQueue.offer(edge.to);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>图</category>
      
      <category>算法</category>
      
      <category>图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>graph——图的遍历：bfs与dfs</title>
    <link href="/posts/graph-traversal-7b15924367de/"/>
    <url>/posts/graph-traversal-7b15924367de/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：图的遍历两种方式：深度优先搜索和广度优先搜索。</p><span id="more"></span><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><p>从图的某一顶点出发访问图中其余顶点，且每一个顶点仅被访问一次</p><ul><li>广度优先搜索（Breadth First Search，BFS），又称为宽度优先搜索，横向优先搜索</li><li>深度优先搜索（Depth First Search，DFS）</li></ul><h4 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h4><p>广度优先搜索与二叉树的层序遍历类似，优先访问当前顶点的所有相邻顶点。</p><p>实现：使用<strong>队列</strong></p><ul><li> 给定一个开始的顶点，加入队列，然后弹出</li><li>每弹出一个顶点，把该顶点所有<strong>没有入队</strong>的顶点加入队列，为了记录哪些顶点未入队，可以使用一个Set，当顶点入队时加入Set中</li><li>直到队列为空</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">(K begin)</span> &#123;<br>    Vertex&lt;K, E&gt; vertex = vertices.get(begin);<br>    <span class="hljs-keyword">if</span> (vertex == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;不存在该节点&quot;</span>);<br><br>    Queue&lt;Vertex&lt;K, E&gt;&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    Set&lt;K&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(); <span class="hljs-comment">// 使用一个Set用来记录哪些顶点已经入队</span><br>    queue.offer(vertex);<br>    visited.add(vertex.key);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>        vertex = queue.poll();<br>        System.out.println(vertex);<br>        vertex.outEdges.forEach(edge -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (!visited.contains(edge.to.key)) &#123;<br>                queue.offer(edge.to);<br>                visited.add(edge.to.key);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4><p>深度优先遍历，是对先序遍历的推广，从某个顶点v开始处理，然后递归地便利所有与v邻接的顶点。</p><p>实现：使用<strong>栈</strong></p><ol><li>给定一个开始的顶点，压入栈中，然后弹出</li><li>没弹出一个顶点，把该顶点下一个没有入栈的邻接顶点压入栈中</li><li>直到栈为空</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(K begin)</span> &#123;<br>    Vertex&lt;K, E&gt; vertex = vertices.get(begin);<br>    <span class="hljs-keyword">if</span> (vertex == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;不存在该节点&quot;</span>);<br><br>    Stack&lt;Vertex&lt;K, E&gt;&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    Set&lt;K&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(); <span class="hljs-comment">// 使用一个Set用来记录哪些顶点已经入栈</span><br>    stack.push(vertex);<br>    System.out.println(vertex);<br>    visited.add(vertex.key);<br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>        vertex = stack.pop();<br>        <span class="hljs-keyword">for</span> (Edge&lt;K, E&gt; edge : vertex.outEdges) &#123;<br>            <span class="hljs-keyword">if</span> (!visited.contains(edge.to.key)) &#123;<br>                stack.push(vertex);<br>                stack.push(edge.to);<br>                visited.add(edge.to.key);<br>                System.out.println(edge.to);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="遍历的访问器"><a href="#遍历的访问器" class="headerlink" title="遍历的访问器"></a>遍历的访问器</h3><p>以上的遍历实现，都是直接打印顶点信息，但是有时候，遍历图可能需要进行其他操作，这就需要定义一个接口，具体执行怎样的操作，可以实现该接口中的方法。</p><ol><li>定义一个访问器接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.graph;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-18 11:50 上午</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 图访问器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GraphVisitor</span>&lt;K&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图的顶点的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> k</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(K k)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>重载bfs和dfs方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">(K begin, GraphVisitor&lt;K&gt; visitor)</span> &#123;<br>    Vertex&lt;K, E&gt; vertex = vertices.get(begin);<br>    <span class="hljs-keyword">if</span> (vertex == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;不存在该节点&quot;</span>);<br><br>    Queue&lt;Vertex&lt;K, E&gt;&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    Set&lt;K&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(); <span class="hljs-comment">// 使用一个Set用来记录哪些顶点已经入队</span><br>    queue.offer(vertex);<br>    visited.add(vertex.key);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>        vertex = queue.poll();<br>        visitor.visit(vertex.key);<br>        vertex.outEdges.forEach(edge -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (!visited.contains(edge.to.key)) &#123;<br>                queue.offer(edge.to);<br>                visited.add(edge.to.key);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(K begin, GraphVisitor&lt;K&gt; visitor)</span> &#123;<br>    Vertex&lt;K, E&gt; vertex = vertices.get(begin);<br>    <span class="hljs-keyword">if</span> (vertex == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;不存在该节点&quot;</span>);<br><br>    Stack&lt;Vertex&lt;K, E&gt;&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    Set&lt;K&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(); <span class="hljs-comment">// 使用一个Set用来记录哪些顶点已经入栈</span><br>    stack.push(vertex);<br>    visitor.visit(vertex.key);<br>    visited.add(vertex.key);<br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>        vertex = stack.pop();<br>        <span class="hljs-keyword">for</span> (Edge&lt;K, E&gt; edge : vertex.outEdges) &#123;<br>            <span class="hljs-keyword">if</span> (!visited.contains(edge.to.key)) &#123;<br>                stack.push(vertex);<br>                stack.push(edge.to);<br>                visited.add(edge.to.key);<br>                visitor.visit(edge.to.key);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>图数据结构与算法汇总</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
      <tag>遍历</tag>
      
      <tag>dfs</tag>
      
      <tag>bfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>graph——图生成器</title>
    <link href="/posts/graph-generator-57dc1c3e2733/"/>
    <url>/posts/graph-generator-57dc1c3e2733/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：图生成器，根据给定的二维数据，生成对应的有向图、无向图。在学习图数据结构和相关算法的过程中，能够快速生成Graph对象用于测试，需要配合特定的图数据结构使用。</p><span id="more"></span><h3 id="图生成器"><a href="#图生成器" class="headerlink" title="图生成器"></a>图生成器</h3><p>给定一个二维数组，二维数组的每一行有如下三种情况</p><ul><li>该行的长度为1，则代表图中的1个顶点</li><li>该行的长度为2，则代表图中的两个顶点及顶点之间的一条无权值边</li><li>该行的长度为2，则代表图中的两个顶点及顶点之间的一条带权值边</li></ul><p>生成图的原始数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.graph;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-18 1:00 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] BFS_01 = &#123;<br>            &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>&#125;,<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] BFS_02 = &#123;<br>            &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">4</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;,<br>            &#123;<span class="hljs-number">2</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;,<br>            &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;,<br>            &#123;<span class="hljs-number">4</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">5</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">6</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] BFS_03 = &#123;<br>            &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;,<br>            &#123;<span class="hljs-number">3</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">4</span>, <span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] BFS_04 = &#123;<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">5</span>&#125;,<br>            &#123;<span class="hljs-number">2</span>, <span class="hljs-number">0</span>&#125;,<br>            &#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;,<br>            &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">6</span>, <span class="hljs-number">2</span>&#125;,<br>            &#123;<span class="hljs-number">7</span>, <span class="hljs-number">6</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] DFS_01 = &#123;<br>            &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;,<br>            &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;,<br>            &#123;<span class="hljs-number">3</span>, <span class="hljs-number">7</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] DFS_02 = &#123;<br>            &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] TOPO = &#123;<br>            &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;,<br>            &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">6</span>, <span class="hljs-number">4</span>&#125;,<br>            &#123;<span class="hljs-number">7</span>, <span class="hljs-number">6</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] NO_WEIGHT2 = &#123;<br>            &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;,<br>            &#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;,<br>            &#123;<span class="hljs-number">6</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">6</span>, <span class="hljs-number">5</span>&#125;,<br>            &#123;<span class="hljs-number">4</span>, <span class="hljs-number">7</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] NO_WEIGHT3 = &#123;<br>            &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">5</span>&#125;,<br>            &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;,<br>            &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">3</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] MST_01 = &#123;<br>            &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;,<br>            &#123;<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;,<br>            &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] MST_02 = &#123;<br>            &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">17</span>&#125;, &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">16</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">11</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">10</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">14</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">33</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] WEIGHT3 = &#123;<br>            &#123;<span class="hljs-string">&quot;广州&quot;</span>, <span class="hljs-string">&quot;佛山&quot;</span>, <span class="hljs-number">100</span>&#125;, &#123;<span class="hljs-string">&quot;广州&quot;</span>, <span class="hljs-string">&quot;珠海&quot;</span>, <span class="hljs-number">200</span>&#125;, &#123;<span class="hljs-string">&quot;广州&quot;</span>, <span class="hljs-string">&quot;肇庆&quot;</span>, <span class="hljs-number">200</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;佛山&quot;</span>, <span class="hljs-string">&quot;珠海&quot;</span>, <span class="hljs-number">50</span>&#125;, &#123;<span class="hljs-string">&quot;佛山&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-number">150</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;肇庆&quot;</span>, <span class="hljs-string">&quot;珠海&quot;</span>, <span class="hljs-number">100</span>&#125;, &#123;<span class="hljs-string">&quot;肇庆&quot;</span>, <span class="hljs-string">&quot;南宁&quot;</span>, <span class="hljs-number">150</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;珠海&quot;</span>, <span class="hljs-string">&quot;南宁&quot;</span>, <span class="hljs-number">350</span>&#125;, &#123;<span class="hljs-string">&quot;珠海&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-number">100</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;南宁&quot;</span>, <span class="hljs-string">&quot;香港&quot;</span>, <span class="hljs-number">500</span>&#125;, &#123;<span class="hljs-string">&quot;南宁&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-number">400</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-string">&quot;香港&quot;</span>, <span class="hljs-number">150</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] SP = &#123;<br>            &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">10</span>&#125;, &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">100</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">50</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">10</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">20</span>&#125;, &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">60</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] BF_SP = &#123;<br>            &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">10</span>&#125;, &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">8</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">8</span>&#125;, &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, -<span class="hljs-number">5</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">3</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] WEIGHT5 = &#123;<br>            &#123;<span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>&#125;,<br>            &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>&#125;,<br>            &#123;<span class="hljs-number">3</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>&#125;,<br>            &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>&#125;,<br>            &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>&#125;,<br>            &#123;<span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>&#125;,<br>            &#123;<span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">4</span>&#125;,<br>            &#123;<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">4</span>&#125;,<br>            &#123;<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">2</span>&#125;,<br>            &#123;<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-number">11</span>, <span class="hljs-number">15</span>, <span class="hljs-number">4</span>&#125;,<br>            &#123;<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">2</span>&#125;,<br>            &#123;<span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-number">15</span>, <span class="hljs-number">17</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] NEGATIVE_WEIGHT1 = &#123;<br>            &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, -<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">4</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">2</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">5</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, -<span class="hljs-number">3</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有负权环</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] NEGATIVE_WEIGHT2 = &#123;<br>            &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">2</span>&#125;<br>    &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>图生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.graph;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-18 1:01 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListGraphGenerator</span>&lt;K, V&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据数据生成有向图或无向图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 生成图的原始数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> directed 生成无向图还是有向图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ListGraph&lt;K, V&gt; <span class="hljs-title function_">generateListGraph</span><span class="hljs-params">(Object[][] data, <span class="hljs-type">boolean</span> directed)</span> &#123;<br>        ListGraph&lt;K, V&gt; graph = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListGraph</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (Object[] row : data) &#123;<br>            <span class="hljs-keyword">if</span> (row.length == <span class="hljs-number">1</span>) &#123;<br>                graph.addVertex((K) row[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (row.length == <span class="hljs-number">2</span>) &#123;<br>                graph.addEdge((K) row[<span class="hljs-number">0</span>], (K) row[<span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">if</span> (!directed) &#123;<br>                    graph.addEdge((K) row[<span class="hljs-number">1</span>], (K) row[<span class="hljs-number">0</span>]);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (row.length == <span class="hljs-number">3</span>) &#123;<br>                graph.addEdge((K) row[<span class="hljs-number">0</span>], (K) row[<span class="hljs-number">1</span>], (V) row[<span class="hljs-number">2</span>]);<br>                <span class="hljs-keyword">if</span> (!directed) &#123;<br>                    graph.addEdge((K) row[<span class="hljs-number">1</span>], (K) row[<span class="hljs-number">0</span>], (V) row[<span class="hljs-number">2</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> graph;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成有向图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ListGraph&lt;K, V&gt; <span class="hljs-title function_">generateListDigraph</span><span class="hljs-params">(Object[][] data)</span> &#123;<br>        <span class="hljs-keyword">return</span> generateListGraph(data, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成无向图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ListGraph&lt;K, V&gt; <span class="hljs-title function_">generateListUnDigraph</span><span class="hljs-params">(Object[][] data)</span> &#123;<br>        <span class="hljs-keyword">return</span> generateListGraph(data, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>图生成器的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGenerator</span><span class="hljs-params">()</span> &#123;<br>    ListGraphGenerator&lt;String, Integer&gt; generator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListGraphGenerator</span>&lt;&gt;();<br>    ListGraph&lt;String, Integer&gt; graph = generator.generateListUnDigraph(Data.BFS_01);<br>    graph.bfs(<span class="hljs-string">&quot;A&quot;</span>);<br><br>    ListGraphGenerator&lt;Integer, Integer&gt; generator1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListGraphGenerator</span>&lt;&gt;();<br>    ListGraph&lt;Integer, Integer&gt; graph1 = generator1.generateListDigraph(Data.BFS_02);<br>    graph1.bfs(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>图</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-security——web权限方案：自动登录</title>
    <link href="/posts/spring-security-web3-e29d760b7d13/"/>
    <url>/posts/spring-security-web3-e29d760b7d13/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：SpringSecurity基于数据库实现自动登录功能的开发步骤。</p><span id="more"></span><h3 id="基于数据库实现Remember-me"><a href="#基于数据库实现Remember-me" class="headerlink" title="基于数据库实现Remember-me"></a>基于数据库实现Remember-me</h3><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><ol><li>创建数据库表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `persistent_logins` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`series` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`token` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`last_used` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <br><span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`series`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><ol start="2"><li>修改配置类</li></ol><ul><li>在配置类中注入数据源，配置操作数据库对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PersistentTokenRepository <span class="hljs-title function_">persistentTokenRepository</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JdbcTokenRepositoryImpl</span> <span class="hljs-variable">jdbcTokenRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTokenRepositoryImpl</span>();<br>        jdbcTokenRepository.setDataSource(dataSource);<br>        <span class="hljs-comment">// 自动创建数据库表（已手动创建）</span><br>        <span class="hljs-comment">// jdbcTokenRepository.setCreateTableOnStartup(true);</span><br>        <span class="hljs-keyword">return</span> jdbcTokenRepository;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>在configure(HttpSecurity http)方法中设置自动登录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">.and().rememberMe().tokenRepository(persistentTokenRepository())<br>.tokenValiditySeconds(<span class="hljs-number">60</span>) <span class="hljs-comment">// 设置有效时长</span><br>.userDetailsService(userDetailsService)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-16 1:44 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Qualifier(&quot;userDetailsService2&quot;)</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PersistentTokenRepository <span class="hljs-title function_">persistentTokenRepository</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JdbcTokenRepositoryImpl</span> <span class="hljs-variable">jdbcTokenRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTokenRepositoryImpl</span>();<br>        jdbcTokenRepository.setDataSource(dataSource);<br>        <span class="hljs-comment">// 自动创建数据库表（已手动创建）</span><br>        <span class="hljs-comment">// jdbcTokenRepository.setCreateTableOnStartup(true);</span><br>        <span class="hljs-keyword">return</span> jdbcTokenRepository;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService)<br>                .passwordEncoder(passwordEncoder());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 配置退出的路径</span><br>        http.logout().logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="hljs-string">&quot;/test/logout&quot;</span>).permitAll();<br>        <span class="hljs-comment">// 配置没有访问权限是返回的页面路径</span><br>        http.exceptionHandling().accessDeniedPage(<span class="hljs-string">&quot;/403.html&quot;</span>);<br>        http.formLogin() <span class="hljs-comment">// 自定义自己编写的登录页面</span><br>                .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .loginProcessingUrl(<span class="hljs-string">&quot;/user/login&quot;</span>) <span class="hljs-comment">// 登录访问路径</span><br>                .defaultSuccessUrl(<span class="hljs-string">&quot;/success.html&quot;</span>).permitAll() <span class="hljs-comment">// 登录成功后跳转页面</span><br>                .and().authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;/user/login&quot;</span>).permitAll() <span class="hljs-comment">// 设置哪些路径可以直接访问不需要认证</span><br>                <span class="hljs-comment">// hasAuthority 方法</span><br>                .antMatchers(<span class="hljs-string">&quot;/test/hello&quot;</span>).hasAuthority(<span class="hljs-string">&quot;admin&quot;</span>) <span class="hljs-comment">// 设置路径 &quot;/test/hello&quot; 需要admin权限才能访问</span><br>                <span class="hljs-comment">// hasAnyAuthority 方法</span><br>                .antMatchers(<span class="hljs-string">&quot;/test/share&quot;</span>).hasAnyAuthority(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>)<br>                <span class="hljs-comment">// hasRole 方法</span><br>                .antMatchers(<span class="hljs-string">&quot;/test/role&quot;</span>).hasRole(<span class="hljs-string">&quot;admin&quot;</span>)<br>                .anyRequest().authenticated()<br>                .and().rememberMe().tokenRepository(persistentTokenRepository())<br>                .tokenValiditySeconds(<span class="hljs-number">60</span>) <span class="hljs-comment">// 设置有效时长</span><br>                .userDetailsService(userDetailsService)<br>                .and().csrf().disable(); <span class="hljs-comment">// 关闭csrf防护</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>修改登录页面login.html</li></ol><ul><li>添加一个复选框，复选框的name必须为<strong>remember-me</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>      用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember-me&quot;</span> /&gt;</span>记住我<br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>graph——图数据结构基础</title>
    <link href="/posts/graph-basic-5b02d4d45f72/"/>
    <url>/posts/graph-basic-5b02d4d45f72/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：介绍图（Graph）相关的定义和图的分类，使用Java语言实现了图的数据结构。</p><span id="more"></span><h3 id="图（Graph）相关定义及分类"><a href="#图（Graph）相关定义及分类" class="headerlink" title="图（Graph）相关定义及分类"></a>图（Graph）相关定义及分类</h3><h4 id="图（Graph）"><a href="#图（Graph）" class="headerlink" title="图（Graph）"></a>图（Graph）</h4><p>一个<strong>图</strong>（graph）G=（V，E）由<strong>顶点</strong>（vertex）的集V和<strong>边</strong>（edge）的集E组成</p><h4 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h4><h4 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h4><h3 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h3><h4 id="邻接矩阵（Adjacent-Matrix）"><a href="#邻接矩阵（Adjacent-Matrix）" class="headerlink" title="邻接矩阵（Adjacent Matrix）"></a>邻接矩阵（Adjacent Matrix）</h4><h4 id="邻接表（Adjacent-List）"><a href="#邻接表（Adjacent-List）" class="headerlink" title="邻接表（Adjacent List）"></a>邻接表（Adjacent List）</h4><h3 id="图数据结构的实现"><a href="#图数据结构的实现" class="headerlink" title="图数据结构的实现"></a>图数据结构的实现</h3><h4 id="创建一个接口，在接口中声明图主要的API"><a href="#创建一个接口，在接口中声明图主要的API" class="headerlink" title="创建一个接口，在接口中声明图主要的API"></a>创建一个接口，在接口中声明图主要的API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.graph;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-17 4:11 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Graph</span>&lt;K, E&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 边的个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">edgesSize</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 定点个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">verticesSize</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加一个顶点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> k</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addVertex</span><span class="hljs-params">(K k)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加一条无权值的边</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> from</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> to</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEdge</span><span class="hljs-params">(K from, K to)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加一条带权值的边</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> from</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> to</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> weight</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEdge</span><span class="hljs-params">(K from, K to, E weight)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除一个顶点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> k</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeVertex</span><span class="hljs-params">(K k)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除一条边</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> from</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> to</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeEdge</span><span class="hljs-params">(K from, K to)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="创建Graph接口的实现类，实现各方法"><a href="#创建Graph接口的实现类，实现各方法" class="headerlink" title="创建Graph接口的实现类，实现各方法"></a>创建Graph接口的实现类，实现各方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.graph;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-17 4:21 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListGraph</span>&lt;K, E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Graph</span>&lt;K, E&gt; &#123;<br>    <span class="hljs-keyword">private</span> Map&lt;K, Vertex&lt;K, E&gt;&gt; vertices;<br>    <span class="hljs-keyword">private</span> Set&lt;Edge&lt;K, E&gt;&gt; edges;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ListGraph</span><span class="hljs-params">()</span> &#123;<br>        vertices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        edges = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        vertices.forEach((k, vertex) -&gt; &#123;<br>            System.out.println(k + <span class="hljs-string">&quot;-&gt;&quot;</span> + vertex);<br>        &#125;);<br><br>        edges.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">edgesSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> edges.size();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">verticesSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> vertices.size();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addVertex</span><span class="hljs-params">(K k)</span> &#123;<br>        vertices.put(k, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>&lt;&gt;(k));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEdge</span><span class="hljs-params">(K from, K to)</span> &#123;<br>        addEdge(from, to, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEdge</span><span class="hljs-params">(K from, K to, E weight)</span> &#123;<br>        Vertex&lt;K, E&gt; fromVertex = vertices.get(from);<br>        <span class="hljs-keyword">if</span> (fromVertex == <span class="hljs-literal">null</span>) &#123;<br>            fromVertex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>&lt;&gt;(from);<br>            vertices.put(from, fromVertex);<br>        &#125;<br><br>        Vertex&lt;K, E&gt; toVertex = vertices.get(to);<br>        <span class="hljs-keyword">if</span> (toVertex == <span class="hljs-literal">null</span>) &#123;<br>            toVertex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>&lt;&gt;(to);<br>            vertices.put(to, toVertex);<br>        &#125;<br><br>        Edge&lt;K, E&gt; edge = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Edge</span>&lt;&gt;(weight, fromVertex, toVertex);<br>        <span class="hljs-keyword">if</span> (fromVertex.outEdges.remove(edge)) &#123;<br>            toVertex.inEdges.remove(edge);<br>        &#125;<br>        fromVertex.outEdges.add(edge);<br>        toVertex.inEdges.add(edge);<br>        edges.add(edge);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeVertex</span><span class="hljs-params">(K k)</span> &#123;<br>        Vertex&lt;K, E&gt; vertex = vertices.remove(k);<br>        <span class="hljs-keyword">if</span> (vertex == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        Iterator&lt;Edge&lt;K, E&gt;&gt; iterator = vertex.inEdges.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Edge&lt;K, E&gt; edge = iterator.next();<br>            edge.from.outEdges.remove(edge);<br>            iterator.remove();<br>            edges.remove(edge);<br>        &#125;<br>        iterator = vertex.outEdges.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Edge&lt;K, E&gt; edge = iterator.next();<br>            edge.to.inEdges.remove(edge);<br>            iterator.remove();<br>            edges.remove(edge);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeEdge</span><span class="hljs-params">(K from, K to)</span> &#123;<br>        Vertex&lt;K, E&gt; fromVertex = vertices.get(from);<br>        <span class="hljs-keyword">if</span> (fromVertex == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        Vertex&lt;K, E&gt; toVertex = vertices.get(to);<br>        <span class="hljs-keyword">if</span> (toVertex == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br><br>        Edge&lt;K, E&gt; edge = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Edge</span>&lt;&gt;(fromVertex, toVertex);<br>        <span class="hljs-keyword">if</span> (edges.remove(edge)) &#123;<br>            fromVertex.outEdges.remove(edge);<br>            toVertex.inEdges.remove(edge);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图的边</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;K&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;E&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Edge</span>&lt;K, E&gt; &#123;<br>        E weight;<br>        Vertex&lt;K, E&gt; from;<br>        Vertex&lt;K, E&gt; to;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Edge</span><span class="hljs-params">(Vertex&lt;K, E&gt; from, Vertex&lt;K, E&gt; to)</span> &#123;<br>            <span class="hljs-built_in">this</span>(<span class="hljs-literal">null</span>, from, to);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Edge</span><span class="hljs-params">(E weight, Vertex&lt;K, E&gt; from, Vertex&lt;K, E&gt; to)</span> &#123;<br>            <span class="hljs-built_in">this</span>.weight = weight;<br>            <span class="hljs-built_in">this</span>.from = from;<br>            <span class="hljs-built_in">this</span>.to = to;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            Edge&lt;?, ?&gt; edge = (Edge&lt;?, ?&gt;) o;<br>            <span class="hljs-keyword">return</span> Objects.equals(from, edge.from) &amp;&amp; Objects.equals(to, edge.to);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> Objects.hash(from, to);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Edge&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;weight=&quot;</span> + weight +<br>                    <span class="hljs-string">&quot;, from=&quot;</span> + from +<br>                    <span class="hljs-string">&quot;, to=&quot;</span> + to +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图的定点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;K&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;E&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vertex</span>&lt;K, E&gt; &#123;<br>        K key;<br>        Set&lt;Edge&lt;K, E&gt;&gt; inEdges;<br>        Set&lt;Edge&lt;K, E&gt;&gt; outEdges;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Vertex</span><span class="hljs-params">(K key)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.inEdges = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>            <span class="hljs-built_in">this</span>.outEdges = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            Vertex&lt;?, ?&gt; vertex = (Vertex&lt;?, ?&gt;) o;<br>            <span class="hljs-keyword">return</span> Objects.equals(key, vertex.key);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> Objects.hash(key);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> key.toString();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ListGraph&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;vertices=&quot;</span> + vertices +<br>                <span class="hljs-string">&quot;, edges=&quot;</span> + edges +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p><strong>图数据结构与算法文章汇总</strong></p><p><a href="https://shgang97.github.io/posts/graph-basic-5b02d4d45f72/">graph——图数据结构基础</a></p><p><a href="https://shgang97.github.io/posts/graph-generator-57dc1c3e2733/">graph——图生成器</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-security——web权限方案：用户退出</title>
    <link href="/posts/spring-security-web2-a56e3203d130/"/>
    <url>/posts/spring-security-web2-a56e3203d130/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：使用Spring Security完成用户退出功能</p><span id="more"></span><h3 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h3><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><ol><li>在配置类中添加退出的配置</li></ol><ul><li>配置退出路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http.logout().logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="hljs-string">&quot;/test/logout&quot;</span>).permitAll();<br></code></pre></td></tr></table></figure><ul><li>修改登录成功后跳转页面路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.defaultSuccessUrl(<span class="hljs-string">&quot;/success.html&quot;</span>).permitAll() <span class="hljs-comment">// 登录成功后跳转页面</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-16 1:44 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Qualifier(&quot;userDetailsService2&quot;)</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService)<br>                .passwordEncoder(passwordEncoder());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 配置退出的路径</span><br>        http.logout().logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="hljs-string">&quot;/test/logout&quot;</span>).permitAll();<br>        <span class="hljs-comment">// 配置没有访问权限是返回的页面路径</span><br>        http.exceptionHandling().accessDeniedPage(<span class="hljs-string">&quot;/403.html&quot;</span>);<br>        http.formLogin() <span class="hljs-comment">// 自定义自己编写的登录页面</span><br>                .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .loginProcessingUrl(<span class="hljs-string">&quot;/user/login&quot;</span>) <span class="hljs-comment">// 登录访问路径</span><br>                .defaultSuccessUrl(<span class="hljs-string">&quot;/success.html&quot;</span>).permitAll() <span class="hljs-comment">// 登录成功后跳转页面</span><br>                .and().authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;/user/login&quot;</span>).permitAll() <span class="hljs-comment">// 设置哪些路径可以直接访问不需要认证</span><br>                <span class="hljs-comment">// hasAuthority 方法</span><br>                .antMatchers(<span class="hljs-string">&quot;/test/hello&quot;</span>).hasAuthority(<span class="hljs-string">&quot;admin&quot;</span>) <span class="hljs-comment">// 设置路径 &quot;/test/hello&quot; 需要admin权限才能访问</span><br>                <span class="hljs-comment">// hasAnyAuthority 方法</span><br>                .antMatchers(<span class="hljs-string">&quot;/test/share&quot;</span>).hasAnyAuthority(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>)<br>                <span class="hljs-comment">// hasRole 方法</span><br>                .antMatchers(<span class="hljs-string">&quot;/test/role&quot;</span>).hasRole(<span class="hljs-string">&quot;admin&quot;</span>)<br>                .anyRequest().authenticated()<br>                .and().csrf().disable(); <span class="hljs-comment">// 关闭csrf防护</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>添加登录成功后跳转页面</li></ol><ul><li>在/resources/static文件夹下添加success.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>success<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录成功<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/logout&quot;</span>&gt;</span>退出<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>在【TestController】中添加一个方法，退出后返回该页面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/logout&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">logout</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;h1&gt;成功退出！&lt;/h1&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><ul><li>登录页面</li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516201742890.png" alt="登录页面" style="zoom:67%;" /><ul><li>使用root用户登录</li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516201822219.png" alt="成功登录页面" style="zoom:67%;" /><ul><li>访问<strong><a href="http://localhost:8080/test/share">http://localhost:8080/test/share</a></strong></li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516202042736.png" alt="访问成功" style="zoom:67%;" /><ul><li>重新访问登录页面使用root用户进行登录后退出</li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516202258480.png" alt="成功退出" style="zoom:50%;" /><ul><li>再次访问<strong><a href="http://localhost:8080/test/share">http://localhost:8080/test/share</a></strong>页面</li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516202348121.png" alt="image-20220516202348121" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-security——web权限方案：用户授权</title>
    <link href="/posts/spring-security-web1-ce251f78ecfb/"/>
    <url>/posts/spring-security-web1-ce251f78ecfb/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：介绍了SpringSecurity基于角色和用户权限进行访问控制，在没有权限时设置拒绝访问页面，以及基于注解开发进行访问控制。</p><span id="more"></span><h3 id="基于角色或权限进行访问控制"><a href="#基于角色或权限进行访问控制" class="headerlink" title="基于角色或权限进行访问控制"></a>基于角色或权限进行访问控制</h3><h4 id="hasAuthority方法"><a href="#hasAuthority方法" class="headerlink" title="hasAuthority方法"></a>hasAuthority方法</h4><p>如果当前主题具有指定的权限，则返回true，否则返回false</p><ol><li>在配置类设置当前访问地址有哪些权限</li></ol><ul><li> .antMatchers(“/test/hello”) 匹配路径 “/test/hello”</li><li> .hasAnyAuthority(“admin”) 需要admin权限才能访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-16 1:44 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Qualifier(&quot;userDetailsService2&quot;)</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService)<br>                .passwordEncoder(passwordEncoder());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.formLogin() <span class="hljs-comment">// 自定义自己编写的登录页面</span><br>                .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .loginProcessingUrl(<span class="hljs-string">&quot;/user/login&quot;</span>) <span class="hljs-comment">// 登录访问路径</span><br>                .defaultSuccessUrl(<span class="hljs-string">&quot;/test/index&quot;</span>).permitAll() <span class="hljs-comment">// 登录成功后跳转页面</span><br>                .and().authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;/user/login&quot;</span>).permitAll() <span class="hljs-comment">// 设置哪些路径可以直接访问不需要认证</span><br>                <span class="hljs-comment">// hasAuthority 方法</span><br>                .antMatchers(<span class="hljs-string">&quot;/test/hello&quot;</span>).hasAuthority(<span class="hljs-string">&quot;admin&quot;</span>) <span class="hljs-comment">// 设置路径 &quot;/test/hello&quot; 需要admin权限才能访问</span><br>                .anyRequest().authenticated()<br>                .and().csrf().disable(); <span class="hljs-comment">// 关闭csrf防护</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>在UserDetailsService的实现类中，设置返回的User对象具有的权限</li></ol><ul><li>设置root用户具有<strong>root</strong>权限</li><li>设置其他用户具有<strong>admin</strong>权限</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.service;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> com.shg.securitydemo.entity.User;<br><span class="hljs-keyword">import</span> com.shg.securitydemo.mapper.UserMapper;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-16 1:53 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(value = &quot;userDetailsService2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetailsService2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-comment">// 调用userMapper中的方法，根据用户名查询数据库</span><br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置查询条件</span><br>        wrapper.eq(<span class="hljs-string">&quot;name&quot;</span>, username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(wrapper);<br>        <span class="hljs-comment">// 判断是否查到用户</span><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 数据库没有用户名，认证失败</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户名不存在！&quot;</span>);<br>        &#125;<br>        List&lt;GrantedAuthority&gt; authorities;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;root&quot;</span>.equals(user.getName())) &#123;<br>            authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;root&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;admin&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.springframework.security.core.userdetails.User(user.getName(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(user.getPassword()),<br>                authorities);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>启动项目查看访问**”/test/hello”**结果</li></ol><p>该路径需要admin权限才能访问</p><ul><li>登录root用户返回错误页面</li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516141039645.png" alt="登录root用户返回的错误页面" style="zoom:50%;" /><ul><li>登录admin用户正常访问</li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516141146639.png" alt="登录admin用户正常访问" style="zoom:50%;" /><h4 id="hasAnyAuthority方法"><a href="#hasAnyAuthority方法" class="headerlink" title="hasAnyAuthority方法"></a>hasAnyAuthority方法</h4><p>如果当前的主体有任何提供的权限，返回rue</p><ol><li>在【TestController】中添加一个方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;share&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">share</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello admin or root&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在配置文件中设置访问**/test/share**的权限</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// hasAnyAuthority 方法</span><br>.antMatchers(<span class="hljs-string">&quot;/test/share&quot;</span>).hasAnyAuthority(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="hasRole方法"><a href="#hasRole方法" class="headerlink" title="hasRole方法"></a>hasRole方法</h4><p>如果当前主题具有指定的角色，返回true</p><ol><li>在【TestController】中添加一个方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;role&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">role</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello hasRole&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>修改【MyUserDetailsService2】，给用户返回的权限中添加<strong>ROLE_user</strong></li></ol><ul><li>需要加上**ROLE_**前缀</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;GrantedAuthority&gt; authorities;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;root&quot;</span>.equals(user.getName())) &#123;<br>    authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;root,ROLE_root&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;admin,ROLE_admin&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>在配置类中设置访问**/test/role**需要的角色</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// hasRole 方法</span><br>.antMatchers(<span class="hljs-string">&quot;/test/role&quot;</span>).hasRole(<span class="hljs-string">&quot;admin&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="hasAnyRole方法"><a href="#hasAnyRole方法" class="headerlink" title="hasAnyRole方法"></a>hasAnyRole方法</h4><p>与hasAnyAuthority方法方法类似，不同在于在设置角色时需要加上**ROLE_**前缀</p><h3 id="自定义没有权限返回的页面"><a href="#自定义没有权限返回的页面" class="headerlink" title="自定义没有权限返回的页面"></a>自定义没有权限返回的页面</h3><ol><li>在/resources/static路径下添加一个403.html</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>403<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>没有访问权限！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在配置类中配置返回的错误页面</li></ol><p>在**configure(HttpSecurity http)**方法中添加如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 配置没有访问权限是返回的页面路径</span><br>http.exceptionHandling().accessDeniedPage(<span class="hljs-string">&quot;/403.html&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>使用root账号登录访问**/test/role**路径</li></ol><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516155654331.png" alt="image-20220516155654331" style="zoom:67%;" /><h3 id="基于注解用户授权"><a href="#基于注解用户授权" class="headerlink" title="基于注解用户授权"></a>基于注解用户授权</h3><h4 id="Secured注解"><a href="#Secured注解" class="headerlink" title="@Secured注解"></a>@Secured注解</h4><p>判断是否具有角色，这里的匹配的自负需要添加铅坠<strong>ROLE_</strong></p><ol><li>在启动类加上**@EnableGlobalMethodSecurity**注解，并开启@Secured</li></ol><ul><li>设置注解@EnableGlobalMethodSecurity中的securedEnabled = true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(value = &#123;&quot;com.shg.securitydemo.mapper&quot;&#125;)</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityDemoApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SecurityDemoApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在【TestController】中添加一个方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/anno&quot;)</span><br><span class="hljs-meta">@Secured(value = &#123;&quot;ROLE_root&quot;&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">annotation</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello annotation&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PreAuthorize"><a href="#PreAuthorize" class="headerlink" title="@PreAuthorize"></a>@PreAuthorize</h4><p>进入方法前的权限验证</p><ol><li>在启动类加上**@EnableGlobalMethodSecurity**注解，并开启prePostEnabled</li></ol><ul><li>设置注解@EnableGlobalMethodSecurity中的prePostEnabled = true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityDemoApplication</span> &#123;<br></code></pre></td></tr></table></figure><ol start="2"><li>在【TestController】中添加一个方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/pre&quot;)</span><br><span class="hljs-meta">@PreAuthorize(value = &quot;hasAuthority(&#x27;admin&#x27;)&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">pre</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello preAuthorize&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PostAuthorize"><a href="#PostAuthorize" class="headerlink" title="@PostAuthorize"></a>@PostAuthorize</h4><p>访问方法后验证权限</p><ol><li>在启动类加上**@EnableGlobalMethodSecurity**注解，并开启prePostEnabled</li></ol><ul><li>设置注解@EnableGlobalMethodSecurity中的prePostEnabled = true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityDemoApplication</span> &#123;<br></code></pre></td></tr></table></figure><ol start="2"><li>在【TestController】中添加一个方法</li></ol><ul><li>在方法中打印添加一句打印方法信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/post&quot;)</span><br><span class="hljs-meta">@PostAuthorize(value = &quot;hasAuthority(&#x27;admin&#x27;)&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">post</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;TestController.post&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello PostAuthorize&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>分别使用root和admin账户登录查看效果</li></ol><ul><li>使用root账户登录，页面现实没有反问权限，但是控制台会输出内容，说明该方法被访问了</li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516165711266.png" alt="root账户登录返回页面" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516165821864.png" alt="root用户登录控制台输出内容" style="zoom:50%;" /><ul><li>使用admin账户登录，可以正常访问，且控制台也会输出内容</li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516165923762.png" alt="admin账户登录" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220516170009681.png" alt="admin用户登录控制台输出内容" style="zoom:50%;" /><h4 id="PostFilter"><a href="#PostFilter" class="headerlink" title="@PostFilter"></a>@PostFilter</h4><p>对方法返回数据进行过滤</p><h4 id="PreFilter"><a href="#PreFilter" class="headerlink" title="@PreFilter"></a>@PreFilter</h4><p>对传入方法数据进行过滤</p>]]></content>
    
    
    <categories>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-security——web权限方案：用户认证</title>
    <link href="/posts/spring-security-web-cd277d24c6fd/"/>
    <url>/posts/spring-security-web-cd277d24c6fd/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：Spring Security web权限认证的三种方案。针对自定义编写实现类方式，详细介绍了使用Mybatis-Plus访问数据库完成用户认证。</p><span id="more"></span><h3 id="Spring-Security-web权限方案"><a href="#Spring-Security-web权限方案" class="headerlink" title="Spring Security web权限方案"></a>Spring Security web权限方案</h3><p>Spring Security中的web权限方案分为认证和授权。</p><p>设置登录的用户名和密码</p><ol><li>通过配置文件</li><li>通过配置类</li><li>自定义编写实现类</li></ol><h4 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h4><p>在【application.properties】中设置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.security.user.name</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.security.user.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><h4 id="配置类方式"><a href="#配置类方式" class="headerlink" title="配置类方式"></a>配置类方式</h4><ul><li><p>新建一个配置类【SecurityConfig】，并在类上加【@Configuration】注解</p></li><li><p>继承【WebSecurityConfigurerAdapter】，重写configure方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-15 4:28 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> passwordEncoder.encode(<span class="hljs-string">&quot;root&quot;</span>);<br>        auth.inMemoryAuthentication()<br>                .passwordEncoder(passwordEncoder)<br>                .withUser(<span class="hljs-string">&quot;root&quot;</span>)<br>                .password(password)<br>                .roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="自定义编写实现类方式"><a href="#自定义编写实现类方式" class="headerlink" title="自定义编写实现类方式"></a>自定义编写实现类方式</h4><p>自定义实现类设置</p><ul><li>创建配置类，设置使用哪个UserDetailService实现类</li><li>编写实现类，返回User对象，User对象有用户名密码和操作权限</li></ul><h5 id="自定义方式开发步骤"><a href="#自定义方式开发步骤" class="headerlink" title="自定义方式开发步骤"></a>自定义方式开发步骤</h5><ol><li>创建配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-15 4:52 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>        auth.userDetailsService(userDetailsService)<br>                .passwordEncoder(passwordEncoder);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>编写【UserDetailsService】的实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.service;<br><br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.User;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-15 5:02 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(value = &quot;userDetailsService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        List&lt;GrantedAuthority&gt; authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;role&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;root&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;root&quot;</span>),<br>                authorities);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="查询数据库完成用户认证"><a href="#查询数据库完成用户认证" class="headerlink" title="查询数据库完成用户认证"></a>查询数据库完成用户认证</h3><h4 id="整合Mybatis-Plus完成数据库操作"><a href="#整合Mybatis-Plus完成数据库操作" class="headerlink" title="整合Mybatis-Plus完成数据库操作"></a>整合Mybatis-Plus完成数据库操作</h4><ol><li>引入相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mybatis-plus依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- lombok依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mysql依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建数据库和数据库表</li></ol><p>创建一个user表结构如下，包含id、name、password三个字段</p><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220515173005126.png" alt="user表结构" style="zoom:50%;" /><ol start="3"><li>创建user表对应实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-15 5:32 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>整合Mybaist-Plus，创建接口【UserMapper】，继承【BaseMapper】</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.shg.securitydemo.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-15 5:36 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="5"><li>在【UserDetailsService】实现类中查询数据库进行认证</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.service;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> com.shg.securitydemo.entity.User;<br><span class="hljs-keyword">import</span> com.shg.securitydemo.mapper.UserMapper;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-15 5:48 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(value = &quot;userDetailsService1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetailsService1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-comment">// 调用userMapper中的方法，根据用户名查询数据库</span><br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置查询条件</span><br>        wrapper.eq(<span class="hljs-string">&quot;name&quot;</span>, username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(wrapper);<br>        <span class="hljs-comment">// 判断是否查到用户</span><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 数据库没有用户名，认证失败</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户名不存在！&quot;</span>);<br>        &#125;<br>        List&lt;GrantedAuthority&gt; authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;role&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.springframework.security.core.userdetails.User(user.getName(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(user.getPassword()),<br>                authorities);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="6"><li>创建配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-15 7:45 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>        auth.userDetailsService(userDetailsService)<br>                .passwordEncoder(passwordEncoder);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="7"><li>在启动类【SecurityDemoApplication】中加入@MapperScan注解指定扫描包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(value = &#123;&quot;com.shg.securitydemo.mapper&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityDemoApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SecurityDemoApplication.class, args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="8"><li>在【application.properties】中配置数据库连接</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置数据库连接</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/security?serverTimezone=GMT%2B8</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><h4 id="自定义登录页面"><a href="#自定义登录页面" class="headerlink" title="自定义登录页面"></a>自定义登录页面</h4><ol><li>在配置类中重写configure(HttpSecurity http)方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-15 7:45 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>        auth.userDetailsService(userDetailsService)<br>                .passwordEncoder(passwordEncoder);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.formLogin() <span class="hljs-comment">// 自定义自己编写的登录页面</span><br>                .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .loginProcessingUrl(<span class="hljs-string">&quot;/user/login&quot;</span>) <span class="hljs-comment">// 登录访问路径</span><br>                .defaultSuccessUrl(<span class="hljs-string">&quot;/test/index&quot;</span>).permitAll() <span class="hljs-comment">// 登录成功后跳转页面</span><br>                .and().authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;/test/hello&quot;</span>, <span class="hljs-string">&quot;/user/login&quot;</span>).permitAll() <span class="hljs-comment">// 设置哪些路径可以直接访问不需要认证</span><br>                .anyRequest().authenticated()<br>                .and().csrf().disable(); <span class="hljs-comment">// 关闭csrf防护</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>编写一个login.html</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>      用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>在【TestController】中定义一个访问首页的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-14 7:00 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello security&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-security——项目环境搭建</title>
    <link href="/posts/spring-security-project-5bcbc790b0ae/"/>
    <url>/posts/spring-security-project-5bcbc790b0ae/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：基于一个SpringBoot项目，导入SpringSecurity后，进行访问。</p><span id="more"></span><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><ol><li>新建一个SpringBoot项目</li></ol><p>按照下图根据自己的目录填好信息后直接next，然后finish即可。</p><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.jpg" alt="环境搭建" /><ol start="2"><li>导入相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>在配置文件【application.properties】中指定端口号（默认为8080）</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br></code></pre></td></tr></table></figure><ol start="4"><li>创建一个Controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.securitydemo.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-14 7:00 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello security&quot;</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="5"><li>项目结构如下</li></ol><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220515153416787.png" alt="项目结构" style="zoom:50%;" /><ol start="6"><li>启动项目</li></ol><p>启动<strong>SecurityDemoApplication</strong>中的main方法启动项目，访问<strong><a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></strong>会自动跳转到登录页面<strong><a href="http://localhost:8080/login">http://localhost:8080/login</a></strong></p><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220515153900113.png" alt="登录页" style="zoom:50%;" /><ul><li>用户名默认为：user</li><li>密码从启动控制台中可以找到</li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220515154047086.png" alt="默认密码" style="zoom:67%;" /><p>输入用户名和密码后登录可以看到如下页面，项目搭建完成</p><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/security/image-20220515154144178.png" alt="成功访问页面" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>项目搭建</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UML面向对象分析与设计——可视化建模基础</title>
    <link href="/posts/uml-9a1bca1b5da9/"/>
    <url>/posts/uml-9a1bca1b5da9/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：</p><span id="more"></span><h3 id="可视化建模基础"><a href="#可视化建模基础" class="headerlink" title="可视化建模基础"></a>可视化建模基础</h3><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><ul><li>模型是现实世界的简化</li></ul><h4 id="建模的目的"><a href="#建模的目的" class="headerlink" title="建模的目的"></a>建模的目的</h4><p>建模的根本目的是为了更好地理解待开发的系统</p><ul><li>模型有助于按照所需的样式<strong style="color:red;">可视化（Visulize）</strong>目标系统</li><li>模型能够<strong style="color:red;">描述（Specifu）</strong>系统的结构和行为</li><li>模型提供构造<strong style="color:red;">构造（Construct）</strong>系统的模版</li><li>模型可以<strong style="color:red;">文档化（Document）</strong>设计决策</li></ul><h4 id="建模的基本原则"><a href="#建模的基本原则" class="headerlink" title="建模的基本原则"></a>建模的基本原则</h4><ul><li>选择合适的模型</li><li>模型具有不同的精确程度</li><li>好的模型是与现实相联系的：简化不能掩盖掉任何重要的细节</li><li>单一的模型是不够的：需要从多个视角创建不同的模型</li></ul><h3 id="统一建模语言（UML）"><a href="#统一建模语言（UML）" class="headerlink" title="统一建模语言（UML）"></a>统一建模语言（UML）</h3><ul><li><p>UML——Unified Modeling Language</p></li><li><p>UML是一种标准的图形化建模语言，是面向对象分析与设计的标准表示</p></li><li><p>统一建模语言 is a language for </p><ul><li>visualizing</li><li>Specifying</li><li>Constructing</li><li>Documenting</li></ul><p>the artifacts of a software-intensive system</p></li></ul><h3 id="UML2组成结构"><a href="#UML2组成结构" class="headerlink" title="UML2组成结构"></a>UML2组成结构</h3><h4 id="UML语法结构"><a href="#UML语法结构" class="headerlink" title="UML语法结构"></a>UML语法结构</h4><p>UML的抽象语法使用UML元模型来定义</p><ul><li>这个元模型本身也是用UML来定义（准确来说是一个受限的UML子集，这个子集符合OMG的MOF规范）</li><li>在UML规范中，主要采用UML类图来描述各元素的抽象语法，菜用约束机制和自然语言（文本）来描述模型语义</li></ul><h4 id="UML语义结构"><a href="#UML语义结构" class="headerlink" title="UML语义结构"></a>UML语义结构</h4><ul><li><p>UML自身的语义与被建模系统的UML模型上所声明的标准含义有关，这有时被称为UML运行时语义</p></li><li><p>UML模型划分为两类语义域</p><ul><li>结构语义：定义了在静默域中关于个体的UML结构化模型元素的含义，也成为静态语义</li><li>行为语义：定义了在建模域中关于个体如何随着时间变化而做出不同行为的UML行为模型元素，也称为动态语义。</li></ul></li></ul><h3 id="UML2概念模型"><a href="#UML2概念模型" class="headerlink" title="UML2概念模型"></a>UML2概念模型</h3><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/UML%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B.jpg" alt="UML概念模型" /><h4 id="构造块（building-blocks）"><a href="#构造块（building-blocks）" class="headerlink" title="构造块（building blocks）"></a>构造块（building blocks）</h4><ul><li>事物（things）：结构、行为、分组、注释</li><li>关系（relationships）：依赖、关联、泛化、实现</li><li>图（diagram）：<ul><li>静态（7种）：类图、对象图、构件图、包图、组合结构图、外廓图</li><li>动态（7种）：顺序图、通信图、时间图、交互纵览图、活动图、状态机图、用例图</li></ul></li></ul><h5 id="事物（things）"><a href="#事物（things）" class="headerlink" title="事物（things）"></a>事物（things）</h5><ul><li>结构（structural）事物：UML模型中的名次<ul><li>模型的静态部分</li><li>用于描述概念元素或物理元素</li><li>常见的结构事物<ul><li>类、接口</li><li>用例、协作</li><li>构件、工件、节点</li></ul></li></ul></li><li>行为（behavioral）事物：UML模型中的动词，表示跨越时间和空间的行为<ul><li>交互、状态机、活动</li></ul></li><li>分组（grouping）事物：用于将模型元素组织在一起<ul><li>包（、框架、模型、子系统……）</li></ul></li><li>注释（annotational）事物：用来描述、说明或标注模型中的任何元素</li></ul><h5 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h5><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/%E5%85%B3%E7%B3%BB.jpg" alt="关系" style="zoom:67%;" /><h5 id="图"><a href="#图" class="headerlink" title="图"></a>图</h5><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/%E5%9B%BE.jpg" alt="图" style="zoom:50%;" /><h4 id="通用机制"><a href="#通用机制" class="headerlink" title="通用机制"></a>通用机制</h4><h5 id="规格说明（Specifications）"><a href="#规格说明（Specifications）" class="headerlink" title="规格说明（Specifications）"></a>规格说明（Specifications）</h5><ol><li>UML模型至少具有两种维度<ul><li>图形维度：使用图和图标可视化模型</li><li>文本维度：各种建模元素的规格说明</li></ul></li><li>规格说明<ul><li>模型元素的特征和语义的文本描述</li><li>形成了承载模型的语义背板（semantic backplane），赋予模型意义，各种图仅仅是该背板的视图或者可视化投影</li><li>death by diagram（由于图形而死亡）</li></ul></li></ol><h5 id="修饰（Adornments）"><a href="#修饰（Adornments）" class="headerlink" title="修饰（Adornments）"></a>修饰（Adornments）</h5><p>UML表示法中的每一个元素都有一个基本符号，可以把各种修饰细节添加到这些符号上</p><ul><li>只有在修饰增强了图形的整体清晰性和可读性或者突出模型的某些特征时，才应该表示那些修饰</li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/%E4%BF%AE%E9%A5%B0.jpg" alt="修饰" style="zoom:50%;" /><h5 id="通用划分（common-Divisions）"><a href="#通用划分（common-Divisions）" class="headerlink" title="通用划分（common Divisions）"></a>通用划分（common Divisions）</h5><ul><li>类元（classifier）和实例的划分<ul><li>类元表示一种抽象</li><li>实例则是这种抽象的一个具体表现<ul><li>例：类/对象、用例/场景、构件/构件实例</li></ul></li></ul></li><li>接口和实现的分离<ul><li>接口声明行为的契约（做什么）</li><li>接口表示对该契约的具体实现细节（如何做）<ul><li>例：接口/子系统、用例/用例实现、操作/方法</li></ul></li></ul></li><li>类型和角色分离（UML2新增）<ul><li>任何作为其他实体结构的一部分实体（如属性）都具有两个方面的特性：<ul><li>从固有类型派生出来的含义</li><li>在语境中的角色派生出来的含义</li></ul></li><li>类型声明了实体的种类（如对象、属性、参数）</li><li>角色描述了实体在语境（如类、构件、协作、组合结构）中的含义</li></ul></li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%A7%92%E8%89%B2%E5%88%86%E7%A6%BB.jpg" alt="类型与角色分离" style="zoom:50%;" /><h5 id="扩展机制（Extensibility-Mechanisms）"><a href="#扩展机制（Extensibility-Mechanisms）" class="headerlink" title="扩展机制（Extensibility Mechanisms）"></a>扩展机制（Extensibility Mechanisms）</h5><ul><li>构造型（stereotypes）<ul><li>基于已有的建模元素引入新的建模元素</li></ul></li><li>标记值（tagged value）<ul><li>扩展UML构造型的特性，可以用来创建构造型的详述信息</li></ul></li><li>约束（constraint）<ul><li>扩展UML构造块的语义，可以用来增加新的规则或修改现有的规则</li></ul></li><li>外廓（profile）<ul><li>提供了一组预定义的构造型、标记值、约束和基类，以用于特定领域的建模</li></ul></li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6.jpg" alt="扩展机制" style="zoom:50%;" /><p>构造型的几种表现形式</p><p><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/%E6%9E%84%E9%80%A0%E5%9E%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F.jpg" alt="构造型的几种表现形式"></p>]]></content>
    
    
    <categories>
      
      <category>面向对象设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>可视化建模</tag>
      
      <tag>UML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UML面向对象分析与设计——OOP基础</title>
    <link href="/posts/oop-47bf8b299fa2/"/>
    <url>/posts/oop-47bf8b299fa2/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：介绍了面向对象设计思想中对象、类、属性、操作的概念，面向对象技术的相关原则。</p><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>根据北航《UML面向对象分析与设计》整理的学习笔记</p><h3 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ol><li>定义</li></ol><p>对象是一个实体，这个实体：</p><ul><li>具有明确定义的<strong>边界</strong>和<strong>标识</strong><ul><li>边界意味着对象是一个封装体，通过封装来与其他对象分割</li><li>标识则表明每一个对象都是唯一的</li></ul></li><li>对象封装了状态和行为<ul><li>对象的状态通过对象的属性（attribute）和关系（relationship）来表达</li><li>对象的行为通过对象的操作（operation）、方法（method）和状态机（state machine）来表达</li></ul></li></ul><ol start="2"><li>在UML中表示对象</li></ol><p>在UML中，对象用矩形框来表示，对象的名字写在矩形框内部，并加上下划线来表示</p><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%A1%A8%E7%A4%BA.jpg" alt="类的表示"  /><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ol><li>类的含义</li></ol><ul><li>类是一系列对象的抽象描述，这些对象共享相同的属性、操作、关系和语义<ul><li>一个具体的对象是该类的一个实例</li></ul></li><li>类是一种抽象<ul><li>将相似的实体抽象成相同的概念</li><li>抽象过程强调相关特征而忽略其他的特征</li></ul></li></ul><ol start="2"><li>UML中类的表示</li></ol><p>在UML中，采用矩形框来表示类，可以将矩形框划分为三个区域，分别表示类名、属性和操作</p><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/%E7%B1%BB%E7%9A%84%E8%A1%A8%E7%A4%BA.jpg" alt="类的表示"  /><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>属性（attribute）是勒的特征或特性</p><ul><li>属性的值是某一特定对象的属性值</li><li>在类中属性名必须是唯一的</li><li>每一个类的实例都有为这个类定义的所有属性的值</li></ul><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ul><li>操作（operation）访问或修改对象的属性值</li><li>对象的行为是由为此对象定义的一系列操作决定的</li><li>一个类可能同时存在多个实例，也可能在某一时刻没有实例</li><li>一个类的所有实例都可以使用这个类中定义的操作</li></ul><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1.jpg" alt="类与对象"  /><h3 id="面向对象技术相关原则"><a href="#面向对象技术相关原则" class="headerlink" title="面向对象技术相关原则"></a>面向对象技术相关原则</h3><p>面向对象技术基本原则</p><ul><li>抽象（Abstraction）</li><li>封装（Encapsulation）</li><li>分解（Decomposition）</li><li>泛化（Generalization）</li><li>多态（Polymorphism）</li><li>分层（Hierarchy）</li><li>复用（Reuse）</li></ul><h4 id="抽象——Abstraction"><a href="#抽象——Abstraction" class="headerlink" title="抽象——Abstraction"></a>抽象——Abstraction</h4><ul><li>抽象是揭示事物区别于其他事物的本质特征的过程<ul><li>是一个分析和理解问题的过程</li><li>抽象的结果取决于使用者的目的，应该包括使用者所感兴趣的那些职责，而忽略掉其他不相关的部分</li></ul></li><li>对象到类的过程就是抽象<ul><li>即将所见到的具体实体抽象成概念，从而在计算机世界中进行描述和各种操作</li></ul></li></ul><h4 id="封装——Encapsulation"><a href="#封装——Encapsulation" class="headerlink" title="封装——Encapsulation"></a>封装——Encapsulation</h4><ul><li>封装是对客户（使用者）隐藏具体实现细节<ul><li>客户只依赖接口</li><li>通过封装实现信息隐藏和数据抽象</li></ul></li><li>为什么要封装<ul><li>保证数据的一致性</li></ul></li></ul><h4 id="分解——Decomposition"><a href="#分解——Decomposition" class="headerlink" title="分解——Decomposition"></a>分解——Decomposition</h4><h4 id="泛化——Generalization"><a href="#泛化——Generalization" class="headerlink" title="泛化——Generalization"></a>泛化——Generalization</h4><ul><li>是类之间的一种“是”（is a/is kind of）关系，通过该关系一个类（子类）可以共享另一个或多个类（父类）的结构和行为<ul><li>采用继承（Inheritance）实现泛化关系</li></ul></li><li>通过泛化关系，可以建立类之间的层次结构，根据继承层次中父类的个数不同，分为：<ul><li>单一继承</li><li>多重继承</li></ul></li></ul><h5 id="单一继承"><a href="#单一继承" class="headerlink" title="单一继承"></a>单一继承</h5><p>一个类继承另外一个类</p><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/%E5%8D%95%E4%B8%80%E7%BB%A7%E6%89%BF.jpg" alt="单一继承" /><h5 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h5><p>一个类继承另外多个类</p><img src="https://raw.githubusercontent.com/shgang97/oss/main/posts/uml/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF.jpg" alt="多重继承" /><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><ul><li>子类继承父类所有的内容：属性、操作、关系和语义<ul><li>其访问权限仍受可见性的约束</li></ul></li><li>子类还可以：<ul><li>添加新的属性、操作、关系和语义</li><li>重新定义继承的操作</li></ul></li><li>设计继承层次<ul><li>父类定义公共的属性、操作、关系和语义</li><li>针对不同的情况定义不同的子类，以扩展父类的属性、操作、行文和语义</li></ul></li></ul><h4 id="多态——Polymorphism"><a href="#多态——Polymorphism" class="headerlink" title="多态——Polymorphism"></a>多态——Polymorphism</h4><ul><li>多态是在统一外表（接口）下隐藏不同实现的能力<ul><li>即一个接口可以有不同的实现行为</li><li>是面向对象技术的本质特征</li></ul></li></ul><h4 id="分层——Hierarchy"><a href="#分层——Hierarchy" class="headerlink" title="分层——Hierarchy"></a>分层——Hierarchy</h4><h4 id="复用——Reuse"><a href="#复用——Reuse" class="headerlink" title="复用——Reuse"></a>复用——Reuse</h4><ul><li>复用是借助于已有软件的各种有关知识建立新的软件的过程</li></ul><h5 id="应用复用原则"><a href="#应用复用原则" class="headerlink" title="应用复用原则"></a>应用复用原则</h5><ul><li>系统开发各个阶段都可能涉及到复用<ul><li>从最底层的<strong style="color:red;">代码复用</strong>，到<strong style="color:red;">设计复用</strong>、<strong style="color:red;">架构复用</strong>，再到<strong style="color:red;">需求复用</strong>，甚至于延伸到特定业务<strong style="color:red;">领域的复用</strong></li><li>复用原则要求设计者不仅针对当前的业务需求开展设计，还需要考虑业务的通用性和可扩展性等问题，从而设计抽象层次高、复用粒度大的组件</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>面向对象设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>solid</title>
    <link href="/posts/solid-90f5a91dc1e8/"/>
    <url>/posts/solid-90f5a91dc1e8/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：</p><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>设计模式的目的是为了提高代码的重用性、可读性、可扩展性、可靠性以及实现程序的高内聚、低耦合。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>solid原则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring注解开发3——属性赋值与自动装配</title>
    <link href="/posts/spring-annotation-3-40ec8cc4d1cc/"/>
    <url>/posts/spring-annotation-3-40ec8cc4d1cc/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：介绍了Spring容器给属性赋值和自动装配</p><span id="more"></span><h3 id="属性赋值"><a href="#属性赋值" class="headerlink" title="属性赋值"></a>属性赋值</h3><h4 id="使用-Value注解"><a href="#使用-Value注解" class="headerlink" title="使用@Value注解"></a>使用@Value注解</h4><p>通过在需要赋值的属性上加@Value注解，然后设置注解的参数value完成对属性的赋值。参数value的值是一个字符串，字符串的引号内可以写：</p><ul><li>基本数值：如基本的数据类型</li><li>SpEL：#{}</li><li>${}：取出配置文件【properties】中的值（运行环境变量里面的值）</li></ul><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><ol><li>创建配置文件</li></ol><p>在resources文件夹下创建一个properties文件，在文件夹中写要给属性赋的值</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">person.sex</span>=<span class="hljs-string">男</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建一个Person类</li></ol><p>该类有三个属性，分别是name: String、a ge: int、sex: String。分别采用上述三种方式进行赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.bean;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-12 12:46 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-meta">@Value(value = &quot;property&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(value = &quot;#&#123;20-2&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@Value(value = &quot;$&#123;person.sex&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>新建一个配置类</li></ol><ul><li><p>配置类中首先使用@Configuration注解将该类声明为配置类</p></li><li><p>使用@PropertySource注解导入配置文件</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-keyword">import</span> com.shg.bean.Person;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-12 12:47 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@PropertySource(value = &#123;&quot;classpath:/application.properties&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>查看输出结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.test;<br><br><span class="hljs-keyword">import</span> com.shg.bean.Person;<br><span class="hljs-keyword">import</span> com.shg.config.MyConfig;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-12 12:49 上午</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertyTest</span> &#123;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPropertySet</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> context.getBean(Person.class);<br>        System.out.println(<span class="hljs-string">&quot;person = &quot;</span> + person); <span class="hljs-comment">// person = Person(name=property, age=18, sex=男)</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><p>Spring利用依赖注入（DI），完成对IOC容器中各个组件的依赖关系赋值，主要有@Autowired、@Resource、@Inject三种方式。</p><h4 id="标记属性完成自动装配"><a href="#标记属性完成自动装配" class="headerlink" title="标记属性完成自动装配"></a>标记属性完成自动装配</h4><h5 id="Autowired自动注入原理"><a href="#Autowired自动注入原理" class="headerlink" title="@Autowired自动注入原理"></a>@Autowired自动注入原理</h5><ol><li><p>默认优先 按照类型去容器中找对应的组件：通过调用getBean(Class<T> var1)方法</p></li><li><p>如果容器中有多个相同类型的组件，再将属性的名称作为组件的id去容器中查找：通过调用getBean(String var1)方法</p></li><li><p>还可以通过@Qualifier注解指定需要自动装配的组件id</p></li><li><p>自动装配一定要将属性赋值好，没有则会报错。可以通过@Autowired(required=false)设置容器中有依赖的bean则自动装配，没有则不装配。</p></li><li><p>还可以使用@Primary注解，来指定进行装配的首选bean。</p></li></ol><h5 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h5><ol><li>分别创建三个类如下：</li></ol><p>UserDao类，依赖Person类，但是Person类并没有注册到容器中，因此@Autowired注解的required设置为 false防止报错，不需要重写toString方法，便于查看实例的地址判断是同一个实例，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.dao;<br><br><span class="hljs-keyword">import</span> com.shg.bean.Person;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-12 1:33 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Autowired(required = false)</span><br>    <span class="hljs-keyword">private</span> Person person;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>UserService类，依赖UserDao，且属性名称设置为userDao0，可以排除是根据属性名进行注入的，重写toString（只需要加上@Data注解即可）方法，可以查看到里面的UserDao实例，并且再在UserService中声明一个属性label以区分不同的UserService实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.service;<br><br><span class="hljs-keyword">import</span> com.shg.dao.UserDao;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-12 1:33 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> label;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserService</span><span class="hljs-params">(<span class="hljs-type">int</span> label)</span> &#123;<br>        <span class="hljs-built_in">this</span>.label = label;<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao0;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Usercontroller类，依赖UserService，为了演示根据属性名称和根据@Qualifier设置进行注入，此类中声明了两个UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.controller;<br><br><span class="hljs-keyword">import</span> com.shg.service.UserService;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-12 1:37 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService1;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;userService&quot;)</span><br>    <span class="hljs-keyword">private</span> UserService userService2;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>新建一个配置类</li></ol><p>给类中，也创建了一个UserService实例，该实例的id为userService1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-keyword">import</span> com.shg.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-12 1:37 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(value = &#123;&quot;com.shg.dao&quot;, &quot;com.shg.service&quot;, &quot;com.shg.controller&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig1</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserService <span class="hljs-title function_">userService1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>查看输出结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.test;<br><br><span class="hljs-keyword">import</span> com.shg.config.MyConfig1;<br><span class="hljs-keyword">import</span> com.shg.dao.UserDao;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-12 1:39 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutowiredTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAutowired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(MyConfig1.class);<br>        Arrays.stream(context.getBeanDefinitionNames())<br>                .filter(name -&gt; name.contains(<span class="hljs-string">&quot;user&quot;</span>))<br>                .map(name -&gt; context.getBean(name))<br>                .forEach(System.out::println);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果如下：</p><p>userDao的地址为@51bd8b5c，所有的UserService实例中注入的userDao均为这一个</p><p>UserController有2个UserService实例：</p><ul><li>userService1对应的是根据属性名注入的label为1的UserService实例</li><li>userService2对应的是根据@Qualifier(value = “userService”)注入label为0的UserService实例</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">com.shg.dao.UserDao@51bd8b5c<br>UserService(label=0, userDao0=com.shg.dao.UserDao@51bd8b5c)<br>UserController(userService1=UserService(label=1, userDao0=com.shg.dao.UserDao@51bd8b5c), userService2=UserService(label=0, userDao0=com.shg.dao.UserDao@51bd8b5c))<br>UserService(label=1, userDao0=com.shg.dao.UserDao@51bd8b5c)<br></code></pre></td></tr></table></figure><h5 id="Resource与-Inject"><a href="#Resource与-Inject" class="headerlink" title="@Resource与@Inject"></a>@Resource与@Inject</h5><p>@Resource是JSR250规范的注解，@Inject是JSR330规范的注解，与@Autowired（Spring定义的）的区别如下：</p><p><strong>彩蛋：</strong>意大利杯决赛    尤文图斯 vs 国际米兰 半场1:0</p><p>@Resource</p><ul><li>可以和@Autowired一样实现自动装配功能，默认是按照组件名称进行装配</li><li>没有支持@Primary功能，也没有支持@Autowired(required=false)</li></ul><p>@Inject</p><ul><li>首先需要导入java x.inject包</li><li>支持@Primary功能，没有支持@Autowired(required=false)</li></ul><p><strong>彩蛋</strong>：意大利杯决赛    尤文图斯 vs 国际米兰 全场2:2进入加时赛</p><p><strong>彩蛋</strong>：意大利杯决赛    尤文图斯 vs 国际米兰 加时2:4，国际米兰夺冠</p><p><strong>FORZA INTER</strong></p><h4 id="标记其他位置完成自动装配"><a href="#标记其他位置完成自动装配" class="headerlink" title="标记其他位置完成自动装配"></a>标记其他位置完成自动装配</h4><p>@Autowired可以标记在构造器、参数、方法、属性位置，都是从容器中获取参数组件的值</p><ol><li>标注在方法位置：@Bean+方法参数，参数从容器中获取</li><li>标注在都早起上</li></ol><ul><li>如果再见只有一个又惨构造器，这个有参构造器的@Autowired可以省略</li></ul><ol start="3"><li>放在参数位置</li></ol><h4 id="使用Spring容器底层的组件"><a href="#使用Spring容器底层的组件" class="headerlink" title="使用Spring容器底层的组件"></a>使用Spring容器底层的组件</h4><p>自定义组件如果想用Spring容器底层的一些组件如：ApplicationContext、BeanFactory等，可以通过自定义组件实现xxxAware接口，在创建对象的时候，会调用接口规定的方法注入相关组件。</p><h4 id="Profile环境标识"><a href="#Profile环境标识" class="headerlink" title="@Profile环境标识"></a>@Profile环境标识</h4><p>Profile：Spring提供的可以根据当前环境，动态激活和切换一系列组件的功能</p><p>@Profile注解：指定组件在哪个环境的情况下才能被注册到容器中。</p><ul><li><p>没有@Profile标识的bean，任何环境下都能注册这个bean</p></li><li><p>加了@Profile的bean，只有在标识的环境下才能注册到容器中，默认注册标识为“default”</p></li><li><p>如果@Profile写在类上，则只有指定环境的时候，整个配置类里面的所有配置才能生效</p></li></ul><p>激活环境</p><ol><li>使用命令行动态参数：在虚拟机参数位置设置-Dspring.profile.active=test/prod/dev</li><li>使用代码的方式激活某种环境</li></ol><h5 id="开发步骤——以配置数据库连接池为例"><a href="#开发步骤——以配置数据库连接池为例" class="headerlink" title="开发步骤——以配置数据库连接池为例"></a>开发步骤——以配置数据库连接池为例</h5><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.29<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建配置文件</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">db.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">db.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">db.driverClass</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">db.url.test</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/library</span><br><span class="hljs-attr">db.url.dev</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/cloud_user</span><br><span class="hljs-attr">db.url.prod</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/community</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.EmbeddedValueResolverAware;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Profile;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.util.StringValueResolver;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-12 2:23 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@PropertySource(value = &#123;&quot;classpath:/db.properties&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmbeddedValueResolverAware</span> &#123;<br><br>    <span class="hljs-meta">@Value(value = &quot;$&#123;db.user&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String user;<br>    <span class="hljs-meta">@Value(value = &quot;$&#123;db.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Value(value = &quot;$&#123;db.driverClass&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClass;<br><br>    <span class="hljs-keyword">private</span> StringValueResolver resolver;<br><br>    <span class="hljs-meta">@Profile(value = &quot;default&quot;)</span><br>    <span class="hljs-meta">@Bean(value = &quot;defaultDataSource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSourceDefault</span><span class="hljs-params">(<span class="hljs-meta">@Value(value = &quot;$&#123;db.url.test&#125;&quot;)</span> String url)</span> <span class="hljs-keyword">throws</span> PropertyVetoException &#123;<br>        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>        dataSource.setUser(user);<br>        dataSource.setPassword(password);<br>        dataSource.setJdbcUrl(url);<br>        dataSource.setDriverClass(driverClass);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Profile(value = &quot;test&quot;)</span><br>    <span class="hljs-meta">@Bean(value = &quot;testDataSource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSourceTest</span><span class="hljs-params">(<span class="hljs-meta">@Value(value = &quot;$&#123;db.url.test&#125;&quot;)</span> String url)</span> <span class="hljs-keyword">throws</span> PropertyVetoException &#123;<br>        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>        dataSource.setUser(user);<br>        dataSource.setPassword(password);<br>        dataSource.setJdbcUrl(url);<br>        dataSource.setDriverClass(driverClass);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Profile(value = &quot;dev&quot;)</span><br>    <span class="hljs-meta">@Bean(value = &quot;devDataSource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSourceDev</span><span class="hljs-params">(<span class="hljs-meta">@Value(value = &quot;$&#123;db.password&#125;&quot;)</span> String password)</span> <span class="hljs-keyword">throws</span> PropertyVetoException &#123;<br>        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>        dataSource.setUser(user);<br>        dataSource.setPassword(password);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> resolver.resolveStringValue(<span class="hljs-string">&quot;$&#123;db.url.dev&#125;&quot;</span>);<br>        dataSource.setJdbcUrl(url);<br>        dataSource.setDriverClass(driverClass);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Profile(value = &quot;prod&quot;)</span><br>    <span class="hljs-meta">@Bean(value = &quot;prodDataSource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSourceProd</span><span class="hljs-params">(<span class="hljs-meta">@Value(value = &quot;$&#123;db.password&#125;&quot;)</span> String password)</span> <span class="hljs-keyword">throws</span> PropertyVetoException &#123;<br>        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>        dataSource.setUser(user);<br>        dataSource.setPassword(password);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> resolver.resolveStringValue(<span class="hljs-string">&quot;$&#123;db.url.prod&#125;&quot;</span>);<br>        dataSource.setJdbcUrl(url);<br>        dataSource.setDriverClass(driverClass);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmbeddedValueResolver</span><span class="hljs-params">(StringValueResolver resolver)</span> &#123;<br>        <span class="hljs-built_in">this</span>.resolver = resolver;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>查看运行结果</li></ol><ul><li>不设置任何虚拟机参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testProfile</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(DataSourceConfig.class);<br>    String[] names = context.getBeanDefinitionNames();<br>    Arrays.stream(names)<br>        .filter(name -&gt; name.contains(<span class="hljs-string">&quot;Source&quot;</span>))<br>        .forEach(System.out::println);<br>    <span class="hljs-comment">// dataSourceConfig</span><br>    <span class="hljs-comment">// defaultDataSource</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过代码的方式设置为<strong>test</strong>环境</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTestProfile</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 创建一个AnnotationConfigApplicationContext容器</span><br>    <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>();<br>    <span class="hljs-comment">// 设置需要激活的环境</span><br>    context.getEnvironment().setActiveProfiles(<span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-comment">// 注册配置类</span><br>    context.register(DataSourceConfig.class);<br>    <span class="hljs-comment">// 刷新容器</span><br>    context.refresh();<br>    String[] names = context.getBeanDefinitionNames();<br>    Arrays.stream(names)<br>        .filter(name -&gt; name.contains(<span class="hljs-string">&quot;Source&quot;</span>))<br>        .forEach(System.out::println);<br>    <span class="hljs-comment">// dataSourceConfig</span><br>    <span class="hljs-comment">// testDataSource</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>属性赋值</li></ol><p>通过@Value完成属性赋值，注解中参数value可以是一个字符串、也可以是SpEL表达式、还可以是${}。</p><ol start="2"><li>自动装配</li></ol><p>自动装配的注解有@Autowired、@Resource、@Inject，如果需要注入Spring底层的组件，如xxxAware，可以通过实现响应的接口，在对应方法中设置组件值。</p><p>通过@Profile注解标识bean注册的环境。</p><hr><p><strong>Spring注解开发文章汇总</strong>：</p><p><a href="https://shgang97.github.io/2022/05/10/spring-annotation-1/">spring注解开发1——组件注册</a></p><p><a href="https://shgang97.github.io/2022/05/10/spring-annotation-2/">spring注解开发2——bean的生命周期</a></p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
      <category>ioc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring注解开发2——bean的生命周期</title>
    <link href="/posts/spring-annotation-2-ac361e9c95dc/"/>
    <url>/posts/spring-annotation-2-ac361e9c95dc/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：介绍了bean的生命周期以及执行时机、如何指定bean各个生命周期执行的方法。</p><span id="more"></span><h3 id="Bean的生命周期基础"><a href="#Bean的生命周期基础" class="headerlink" title="Bean的生命周期基础"></a>Bean的生命周期基础</h3><p>bean生命周期是指bean从创建——&gt;初始化——&gt;销毁的过程。容器管理bean的生命周期：自定义初始化和销毁方法，容器在bean进行到当前生命周期的时候，调用自定义的初始化和销毁方法。</p><p> 构造（对象创建）</p><ul><li><p>单实例：容器创建的时候创建对象</p></li><li><p>多实例：每次获取的时候创建对象</p></li></ul><p>初始化：</p><ul><li><pre><code class="hljs"> 对象创建完成，并赋值好，调用初始化方法</code></pre></li></ul><p>销毁：</p><ul><li><pre><code class="hljs"> 单实例：容器关闭的时候调用销毁方法</code></pre></li><li><pre><code class="hljs"> 多实例：容器不会管理这个bean；容器不会调用销毁方法</code></pre></li></ul><h3 id="指定初始化和销毁方法"><a href="#指定初始化和销毁方法" class="headerlink" title="指定初始化和销毁方法"></a>指定初始化和销毁方法</h3><p>通过@Bean指定指定init-method 和 destroy-method</p><ol><li>创建一个Phone类，并在里面定义初始化和销毁方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-11 12:19 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Phone</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;phone constructor ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;phone init ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;phone destroy ...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>在配置类中，通过@Bean注解的参数initMethod和destroyMethod指定初始化和销毁方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-11 12:22 上午</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> com.shg.bean.Phone;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.DisposableBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1）指定初始化和销毁方法：</span><br><span class="hljs-comment"> *      通过<span class="hljs-doctag">@Bean</span>指定指定init-method 和 destroy-method</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig1</span> &#123;<br><br>    <span class="hljs-meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</span><br>    <span class="hljs-keyword">public</span> Phone <span class="hljs-title function_">phone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>创建一个测试类，查看结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.test;<br><br><span class="hljs-keyword">import</span> com.shg.config.MyConfig1;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-11 2:03 下午</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LifeCycleTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(MyConfig1.class);<br>        context.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">phone constructor ...<br>phone init ...<br>phone destroy ...<br></code></pre></td></tr></table></figure><h3 id="实现InitializingBean和DisposableBean接口"><a href="#实现InitializingBean和DisposableBean接口" class="headerlink" title="实现InitializingBean和DisposableBean接口"></a>实现InitializingBean和DisposableBean接口</h3><p>通过在让注册的Bean实现InitializingBean接口中的afterPropertiesSet方法和DisposableBean接口destroy方法</p><ol><li>定义一个Computer类，分别实现InitializingBean和DisposableBean接口</li></ol><ul><li>InitializingBean#afterPropertiesSet()：定义初始化逻辑</li><li>DisposableBean#destroy()：定义销毁逻辑</li><li>后续在配置类中使用@ComponentScan扫描组件的方式将组件注册到容器中，所以给该类加上@Component注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.bean;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.DisposableBean;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.InitializingBean;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-11 2:23 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span>, DisposableBean &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Computer</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Computer.Computer&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;Computer.destroy&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;Computer.afterPropertiesSet&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>在配置类中通过@CompnentScan注解将Computer类（使用了@Component注解）注册到容器中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-11 12:22 上午</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> com.shg.bean.Phone;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.DisposableBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1）指定初始化和销毁方法：</span><br><span class="hljs-comment"> *      通过<span class="hljs-doctag">@Bean</span>指定指定init-method 和 destroy-method</span><br><span class="hljs-comment"> * 2）通过让Bean实现InitializingBean（定义初始化逻辑）、</span><br><span class="hljs-comment"> *                  DisposableBean（定义销毁逻辑）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.shg.bean&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig1</span> &#123;<br><br>    <span class="hljs-meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</span><br>    <span class="hljs-keyword">public</span> Phone <span class="hljs-title function_">phone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>查看结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(MyConfig1.class);<br>    context.close();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Computer.Computer<br>Computer.afterPropertiesSet<br>phone constructor ...<br>phone init ...<br>phone destroy ...<br>Computer.destroy<br></code></pre></td></tr></table></figure><h3 id="使用JSR250规范中的注解"><a href="#使用JSR250规范中的注解" class="headerlink" title="使用JSR250规范中的注解"></a>使用JSR250规范中的注解</h3><p>分别在初始化方法上加@PostConstruct、在销毁方法上加@PreDestroy，当容器在bean执行到对应生命周期会调用对应方法</p><ol><li>定义一个Pad类，并在其初始化和销毁方法上加上注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.bean;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> javax.annotation.PreDestroy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-11 2:58 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pad</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pad</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Pad.Pad&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Pad.init&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Pad.destroy&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li><p>配置类同上，无需改动</p></li><li><p>查看输出结果（代码无需改动）</p></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Computer.Computer<br>Computer.afterPropertiesSet<br>Pad.Pad<br>Pad.init<br>phone constructor ...<br>phone init ...<br>phone destroy ...<br>Pad.destroy<br>Computer.destroy<br></code></pre></td></tr></table></figure><h3 id="BeanPostProcessor：bean的后置处理器"><a href="#BeanPostProcessor：bean的后置处理器" class="headerlink" title="BeanPostProcessor：bean的后置处理器"></a>BeanPostProcessor：bean的后置处理器</h3><p>容器中有BeanPostProcessor接口的实现类，容器所管理的bean在初始化前后进行一些处理工作，在初始化之前会调用接口中的postProcessBeforeInitialization方法，在初始化之后会调用接口中的postProcessAfterInitialization方法。</p><ol><li>定义BeanPostProcessor接口的实现类，并在类上加上@Component注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.processor;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-11 3:20 下午</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 后置处理器：初始化前后进行处理工作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyBeanPostProcessor.postProcessBeforeInitialization&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyBeanPostProcessor.postProcessAfterInitialization&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>修改配置类</li></ol><p>将类上面的注解@ComponentScan(“com.shg.bean”)修改为：@ComponentScan({“com.shg.bean”, “com.shg.processor”})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-11 12:22 上午</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> com.shg.bean.Phone;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1）指定初始化和销毁方法：</span><br><span class="hljs-comment"> *      通过<span class="hljs-doctag">@Bean</span>指定指定init-method 和 destroy-method</span><br><span class="hljs-comment"> * 2）通过让Bean实现InitializingBean（定义初始化逻辑）、</span><br><span class="hljs-comment"> *                  DisposableBean（定义销毁逻辑）</span><br><span class="hljs-comment"> * 3）使用JSR250规范中的注解</span><br><span class="hljs-comment"> *      在初始化方法上加<span class="hljs-doctag">@PostConstruct</span></span><br><span class="hljs-comment"> *      在销毁方法上加<span class="hljs-doctag">@PreDestroy</span></span><br><span class="hljs-comment"> * 4）BeanPostProcessor：bean的后置处理器</span><br><span class="hljs-comment"> *      在bean初始化前后进行一些处理工作</span><br><span class="hljs-comment"> *      postProcessBeforeInitialization：在初始化之前执行</span><br><span class="hljs-comment"> *      postProcessAfterInitialization：在初始化之后执行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.shg.bean&quot;, &quot;com.shg.processor&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig1</span> &#123;<br><br>    <span class="hljs-meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</span><br>    <span class="hljs-keyword">public</span> Phone <span class="hljs-title function_">phone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>查看输出结果</li></ol><p>每个bean在构造方法之后、初始化方法之前会调用postProcessBeforeInitialization</p><p>在初始化方法之后、销毁方法之前会调用：postProcessAfterInitialization</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">MyBeanPostProcessor.postProcessBeforeInitialization<br>MyBeanPostProcessor.postProcessAfterInitialization<br>Computer.Computer<br>MyBeanPostProcessor.postProcessBeforeInitialization<br>Computer.afterPropertiesSet<br>MyBeanPostProcessor.postProcessAfterInitialization<br>Pad.Pad<br>MyBeanPostProcessor.postProcessBeforeInitialization<br>Pad.init<br>MyBeanPostProcessor.postProcessAfterInitialization<br>phone constructor ...<br>MyBeanPostProcessor.postProcessBeforeInitialization<br>phone init ...<br>MyBeanPostProcessor.postProcessAfterInitialization<br>phone destroy ...<br>Pad.destroy<br>Computer.destroy<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>bean的生命周期共分为：bean创建、初始化、销毁三个阶段。定义bean的初始化和销毁方法主要有：通过@Bean注解的init-method 和 destroy-method来指定、实现InitializingBean和DisposableBean接口中的对应方法、使用JSR250规范中的@PostConstructh和@PreDestroy注解。此外，如果容器中有BeanPostProcessor接口的实现类，在初始化方法执行的前后还会执行该接口中的postProcessBeforeInitialization和postProcessAfterInitialization方法。</p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
      <category>ioc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring注解开发1——组件注册</title>
    <link href="/posts/spring-annotation-1-c594551a5c15/"/>
    <url>/posts/spring-annotation-1-c594551a5c15/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：使用注解创建bean的四种方式、具体细节及拓展，涉及到的注解主要有：@Configuration、@Bean、@ComponentScan、@Scope、@Lazy、@Conditional、@Import，涉及到的借口主要有：Condition接口、TypeFilter接口、ImportSelector接口、ImportBeanDefinitionRegistrar接口、FactoryBean接口。</p><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spring注解开发学习笔记。</p><h3 id="Spring通过xml配置文件注注册组件"><a href="#Spring通过xml配置文件注注册组件" class="headerlink" title="Spring通过xml配置文件注注册组件"></a>Spring通过xml配置文件注注册组件</h3><ol><li>创建项目，导入spring-context依赖，使用lombok减少代码量，因此lombok依赖也导入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- lombok依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>定义一个bean：Person</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.bean;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 10:53 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>创建xml配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shg.bean.Person&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="4"><li>从容器中获取bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.test;<br><br><span class="hljs-keyword">import</span> com.shg.bean.Person;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 11:01 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XMLTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;application.xml&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) context.getBean(<span class="hljs-string">&quot;person&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;person = &quot;</span> + person); <span class="hljs-comment">// person = Person(age=18, name=spring)</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Configuration和-Bean给容器中注册组件"><a href="#Configuration和-Bean给容器中注册组件" class="headerlink" title="@Configuration和@Bean给容器中注册组件"></a>@Configuration和@Bean给容器中注册组件</h3><ol><li>创建配置类</li></ol><ul><li>@Configuration 声明本类为配置类</li><li>@Bean 给容器注册一个Bean；类型为返回值类型，id默认是用方法名作为id<ul><li>Bean注解的value值，指定bean的id</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-keyword">import</span> com.shg.bean.Person;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 11:04 上午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 配置类 == 配置文件</span><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// 声明本类为配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-comment">// 给容器注册一个Bean；类型为返回值类型，id默认是用方法名作为id</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;annotation&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 通过value指定id</span><br>    <span class="hljs-meta">@Bean(value = &quot;p1&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;annotation&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>从容器中获取bean</li></ol><ul><li>getBeanNamesForType()方法可以根据类名获取所有bean的id</li><li>使用getBean方法获取bean实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.test;<br><br><span class="hljs-keyword">import</span> com.shg.bean.Person;<br><span class="hljs-keyword">import</span> com.shg.config.MyConfig;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 11:07 上午</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);<br>        <br>        String[] beanNames = context.getBeanNamesForType(Person.class);<br>        Arrays.stream(beanNames)<br>                .map(name -&gt; name + <span class="hljs-string">&quot; = &quot;</span> + context.getBean(name))<br>                .forEach(System.out::println); <br>        <span class="hljs-comment">// person = Person(age=20, name=annotation)</span><br>        <span class="hljs-comment">// p1 = Person(age=18, name=annotation1)</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="ComponentScan自动扫描组件"><a href="#ComponentScan自动扫描组件" class="headerlink" title="@ComponentScan自动扫描组件"></a>@ComponentScan自动扫描组件</h3><ol><li>创建三个bean，分别使用注解@Repository、@Service、@Controller进行声明</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 1:38 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.shg.service;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 1:38 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.shg.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 1:38 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><ol start="2"><li>创建配置类</li></ol><ul><li>@ComponentScan注解的参数：<ul><li>value：指定要扫描的包</li><li>excludeFilters = Filter[]：指定扫描的时候按照什么规则排除组件</li><li>includeFilters = Filter[]：指定扫描的时候只需要哪些组件</li></ul></li><li>Filter[]数组中使用@Filter来具体指定按照什么规则<ul><li>type = FilterType.ANNOTATION：按照注解</li><li>type = FilterType.ASSIGNABLE_TYPE：按照类型</li><li>type = FilterType.ASPECTJ：使用ASPECTJ表达式</li><li>type = FilterType.REGEX：使用正则指定</li><li>type = FilterType.CUSTOM：自定义规则</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.FilterType;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 1:44 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><br><span class="hljs-comment">//@ComponentScan(value = &#123;&quot;com.shg&quot;&#125;) // value指定要扫描的包</span><br><span class="hljs-comment">// excludeFilters = Filter[]：指定扫描的时候按照什么规则排除组件</span><br><span class="hljs-comment">//@ComponentScan(value = &#123;&quot;com.shg&quot;&#125;, excludeFilters = &#123;</span><br><span class="hljs-comment">//        @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class&#125;)</span><br><span class="hljs-comment">//&#125;)</span><br><span class="hljs-comment">// includeFilters = Filter[]：指定扫描的时候只需要哪些组件</span><br><span class="hljs-meta">@ComponentScan(value = &#123;&quot;com.shg&quot;&#125;, includeFilters = &#123;</span><br><span class="hljs-meta">        @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class&#125;)</span><br><span class="hljs-meta">&#125;, useDefaultFilters = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig1</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>输出组件id</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.test;<br><br><span class="hljs-keyword">import</span> com.shg.config.MyConfig1;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 1:45 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest1</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(MyConfig1.class);<br>        Arrays.stream(context.getBeanDefinitionNames())<br>                .forEach(System.out::println);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="自定义Filter指定规则包含或排除组件"><a href="#自定义Filter指定规则包含或排除组件" class="headerlink" title="自定义Filter指定规则包含或排除组件"></a>自定义Filter指定规则包含或排除组件</h4><ol><li>自定义一个Filter，实现TypeFilter接口，指定类名中包含<strong>User</strong>的类注册为bean</li></ol><ul><li>metadataReader：读取到当前正在扫描的类的信息<ul><li>metadataReader.getAnnotationMetadata()：获取当前类注解的信息</li><li>metadataReader.getClassMetadata()：获取当前正在扫描的类信息</li><li>metadataReader.getResource()：获取当前类的自愿信息（类路径）</li></ul></li><li>metadataReaderFactory：可以获取到其他任何类信息的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.filter;<br><br><span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotationMetadata;<br><span class="hljs-keyword">import</span> org.springframework.core.type.ClassMetadata;<br><span class="hljs-keyword">import</span> org.springframework.core.type.classreading.MetadataReader;<br><span class="hljs-keyword">import</span> org.springframework.core.type.classreading.MetadataReaderFactory;<br><span class="hljs-keyword">import</span> org.springframework.core.type.filter.TypeFilter;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 2:52 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TypeFilter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">match</span><span class="hljs-params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// metadataReader：读取到当前正在扫描的类的信息</span><br>        <span class="hljs-comment">// metadataReaderFactory：可以获取到其他任何类信息的</span><br><br>        <span class="hljs-comment">// 获取当前类注解的信息</span><br>        <span class="hljs-type">AnnotationMetadata</span> <span class="hljs-variable">annotationMetadata</span> <span class="hljs-operator">=</span> metadataReader.getAnnotationMetadata();<br>        <span class="hljs-comment">// 获取当前正在扫描的类信息</span><br>        <span class="hljs-type">ClassMetadata</span> <span class="hljs-variable">classMetadata</span> <span class="hljs-operator">=</span> metadataReader.getClassMetadata();<br>        <span class="hljs-comment">// 获取当前类的自愿信息（类路径）</span><br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> metadataReader.getResource();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> classMetadata.getClassName();<br>        System.out.println(<span class="hljs-string">&quot;className = &quot;</span> + className);<br>        <span class="hljs-keyword">return</span> className.contains(<span class="hljs-string">&quot;User&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>在配置类中使用自定义的Filter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-keyword">import</span> com.shg.filter.MyFilter;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.FilterType;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 1:44 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">// 自定义规则：指定名中包含 User 的类</span><br><span class="hljs-meta">@ComponentScan(value = &#123;&quot;com.shg&quot;&#125;, includeFilters = &#123;</span><br><span class="hljs-meta">        @ComponentScan.Filter(type = FilterType.CUSTOM, classes = &#123;MyFilter.class&#125;)</span><br><span class="hljs-meta">&#125;, useDefaultFilters = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig1</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>输出组件的id（略）</li></ol><h4 id="Scope注解设置组件的作用域、-Lazy懒加载"><a href="#Scope注解设置组件的作用域、-Lazy懒加载" class="headerlink" title="@Scope注解设置组件的作用域、@Lazy懒加载"></a>@Scope注解设置组件的作用域、@Lazy懒加载</h4><ol><li>创建配置类</li></ol><ul><li>@Scope通过参数value设置组件的作用域，默认为singleton</li><li>value的取值有：”singleton”、”prototype”、”request”、”session”</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-keyword">import</span> com.shg.bean.Person;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Lazy;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Scope;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 3:15 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig2</span> &#123;<br>    <span class="hljs-comment">// 通过@Scope的value设置bean的作用域，value的取值有：&quot;singleton&quot;、&quot;prototype&quot;、&quot;request&quot;、&quot;session&quot;</span><br>    <span class="hljs-comment">// @Lazy设置单实例bean懒加载</span><br>    <span class="hljs-meta">@Scope(value = &quot;singleton&quot;)</span><br>    <span class="hljs-meta">@Lazy</span><br>    <span class="hljs-meta">@Bean(value = &quot;p&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">18</span>, <span class="hljs-string">&quot;scope&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Scope(value = &quot;prototype&quot;)</span><br>    <span class="hljs-meta">@Bean(value = &quot;p1&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">18</span>, <span class="hljs-string">&quot;scope&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>查看输出结果</li></ol><ul><li>根据id为p获取的bean是单实例的，单实例bean在Ioc容器初始化的时候创建</li><li>根据id为p1获取的bean是多实例的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.test;<br><br><span class="hljs-keyword">import</span> com.shg.bean.Person;<br><span class="hljs-keyword">import</span> com.shg.config.MyConfig1;<br><span class="hljs-keyword">import</span> com.shg.config.MyConfig2;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 1:45 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest1</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testScope</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(MyConfig2.class);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) context.getBean(<span class="hljs-string">&quot;p&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> (Person) context.getBean(<span class="hljs-string">&quot;p&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;(p == p1) = &quot;</span> + (p == p1)); <span class="hljs-comment">// (p == p1) = true</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> (Person) context.getBean(<span class="hljs-string">&quot;p1&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p3</span> <span class="hljs-operator">=</span> (Person) context.getBean(<span class="hljs-string">&quot;p1&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;(p2 == p3) = &quot;</span> + (p2 == p3)); <span class="hljs-comment">// (p2 == p3) = false</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Conditional按照条件注册bean"><a href="#Conditional按照条件注册bean" class="headerlink" title="@Conditional按照条件注册bean"></a>@Conditional按照条件注册bean</h4><ol><li>定义三个实现Condition接口的条件类，表示虚拟机运行的系统条件</li></ol><ul><li>判断是否是Windows系统</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.condition;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Condition;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ConditionContext;<br><span class="hljs-keyword">import</span> org.springframework.core.env.Environment;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 4:02 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WinCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;<br>        <span class="hljs-comment">// 判断是否是Windows系统</span><br>        <span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> context.getEnvironment();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">osName</span> <span class="hljs-operator">=</span> environment.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br>        <span class="hljs-keyword">return</span> osName != <span class="hljs-literal">null</span> &amp;&amp; osName.contains(<span class="hljs-string">&quot;Windows&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>判断是否是Linux系统</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.condition;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Condition;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ConditionContext;<br><span class="hljs-keyword">import</span> org.springframework.core.env.Environment;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 3:56 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinuxCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;<br>        <span class="hljs-comment">// 判断是否是Linux系统</span><br>        <span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> context.getEnvironment();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">osName</span> <span class="hljs-operator">=</span> environment.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br>        <span class="hljs-keyword">return</span> osName != <span class="hljs-literal">null</span> &amp;&amp; osName.contains(<span class="hljs-string">&quot;Linux&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>判断是否是Mac系统</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.condition;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Condition;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ConditionContext;<br><span class="hljs-keyword">import</span> org.springframework.core.env.Environment;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 3:57 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MacCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context 判断条件能使用的上下文环境</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metadata 注释信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;<br>        <span class="hljs-comment">// 判断是否是Mac系统</span><br>        <span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> context.getEnvironment();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">osName</span> <span class="hljs-operator">=</span> environment.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br>        <span class="hljs-keyword">return</span> osName != <span class="hljs-literal">null</span> &amp;&amp; osName.contains(<span class="hljs-string">&quot;Mac&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>创建配置类</li></ol><ul><li>使用@Conditional注解指定bean注册条件</li><li>@Conditional可以放在类上也可以放在方法上</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-keyword">import</span> com.shg.bean.Person;<br><span class="hljs-keyword">import</span> com.shg.condition.LinuxCondition;<br><span class="hljs-keyword">import</span> com.shg.condition.MacCondition;<br><span class="hljs-keyword">import</span> com.shg.condition.WinCondition;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Conditional;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 3:51 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig3</span> &#123;<br>    <span class="hljs-meta">@Bean(value = &quot;bill&quot;)</span><br>    <span class="hljs-meta">@Conditional(value = WinCondition.class)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">60</span>, <span class="hljs-string">&quot;bill&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(value = &quot;linus&quot;)</span><br>    <span class="hljs-meta">@Conditional(value = LinuxCondition.class)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">48</span>, <span class="hljs-string">&quot;linus&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(value = &quot;jobs&quot;)</span><br>    <span class="hljs-meta">@Conditional(value = MacCondition.class)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">48</span>, <span class="hljs-string">&quot;Jobs&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>输出结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConditional</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(MyConfig3.class);<br>    <span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> context.getEnvironment();<br>    System.out.println(<span class="hljs-string">&quot;environment.getProperty(\&quot;os.name\&quot;) = &quot;</span> + environment.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>));<br>    <span class="hljs-comment">// environment.getProperty(&quot;os.name&quot;) = Mac OS X</span><br><br>    String[] names = context.getBeanNamesForType(Person.class);<br>    Arrays.stream(names).forEach(System.out::println); <span class="hljs-comment">// jobs</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Import给容器注册组件"><a href="#Import给容器注册组件" class="headerlink" title="@Import给容器注册组件"></a>@Import给容器注册组件</h3><ol><li>定义四个类Color、Blue、Yellow、RainBow</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 4:18 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 4:31 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Blue</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 4:32 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Yellow</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>自定义一个ImportSelector接口的实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.condition;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ImportSelector;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotationMetadata;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 4:29 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportSelector</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> importingClassMetadata 当前标注<span class="hljs-doctag">@Import</span>注解的类的所有信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 需要导入到容器中到组件的全类名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;com.shg.bean.Yellow&quot;</span>, <span class="hljs-string">&quot;com.shg.bean.Blue&quot;</span>&#125;;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>自定义一个ImportBeanDefinitionRegistrar接口的实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.condition;<br><br><span class="hljs-keyword">import</span> com.shg.bean.RainBow;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.BeanNameGenerator;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.RootBeanDefinition;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotationMetadata;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 4:40 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyImportBeanDefinitionRegistrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportBeanDefinitionRegistrar</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> importingClassMetadata 当前类的注册信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry BeanDefinition注册类，把所有需要添加到容器中的bean：调用registry.registerBeanDefinition()手工注册进来</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> importBeanNameGenerator</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry, BeanNameGenerator importBeanNameGenerator)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasBlue</span> <span class="hljs-operator">=</span> registry.containsBeanDefinition(<span class="hljs-string">&quot;com.shg.bean.Yellow&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasYellow</span> <span class="hljs-operator">=</span> registry.containsBeanDefinition(<span class="hljs-string">&quot;com.shg.bean.Blue&quot;</span>);<br>        <span class="hljs-keyword">if</span> (hasBlue &amp;&amp; hasYellow) &#123;<br>            <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(RainBow.class);<br>            registry.registerBeanDefinition(<span class="hljs-string">&quot;rainBow&quot;</span>, beanDefinition);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>创建配置类</li></ol><ul><li>@Import导入组件，value是一个数组，数组中的元素可以是：<ul><li>一个普通类，id默认是组件的全类名</li><li>ImportSelector接口的实现类，id默认是组件的全类名</li><li>ImportBeanDefinitionRegistrar接口的实现类，id可以在实现类中指定</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-keyword">import</span> com.shg.bean.Color;<br><span class="hljs-keyword">import</span> com.shg.condition.MyImportBeanDefinitionRegistrar;<br><span class="hljs-keyword">import</span> com.shg.condition.MyImportSelector;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 4:18 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Import(value = &#123;Color.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span> <span class="hljs-comment">// @Import导入组件，id默认是组件的全类名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImportConfig</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="5"><li>输出组件的id</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testImport</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(ImportConfig.class);<br>    String[] names = context.getBeanDefinitionNames();<br>    <span class="hljs-keyword">for</span> (String name : names) &#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br>org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br>org.springframework.context.event.internalEventListenerProcessor<br>org.springframework.context.event.internalEventListenerFactory<br>importConfig<br>com.shg.bean.Color<br>com.shg.bean.Yellow<br>com.shg.bean.Blue<br>rainBow<br></code></pre></td></tr></table></figure><h3 id="使用FactoryBean注册组件"><a href="#使用FactoryBean注册组件" class="headerlink" title="使用FactoryBean注册组件"></a>使用FactoryBean注册组件</h3><ol><li>创建一个FactoryBean接口的实现类，范型是要创建的bean的类型</li></ol><ul><li>isSingleton()的返回值：true:这个bean是单实例，在容器中只保存一份； false：多实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.bean;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 4:54 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ColorFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Color&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Color <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> Color.class;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true:这个bean是单实例，在容器中只保存一份； false：多实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>创建配置文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.config;<br><br><span class="hljs-keyword">import</span> com.shg.bean.ColorFactoryBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-10 6:20 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig4</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ColorFactoryBean <span class="hljs-title function_">colorFactoryBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ColorFactoryBean</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>获取bean</li></ol><ul><li>根据id获取bean实例，默认是获取的是调用getObject创建的对象</li><li>如果要获取工厂bean实例，只需要在id前加上 &amp; 前缀</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFactoryBean</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(MyConfig4.class);<br>    String[] names = context.getBeanDefinitionNames();<br>    <span class="hljs-keyword">for</span> (String name : names) &#123;<br>        System.out.println(name);<br>    &#125;<br>    <span class="hljs-comment">// 工厂Bean获取的是调用getObject创建的对象</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">colorFactoryBean</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;colorFactoryBean&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;colorFactoryBean = &quot;</span> + colorFactoryBean); <span class="hljs-comment">// colorFactoryBean = com.shg.bean.Color@20b2475a</span><br><br>    <span class="hljs-comment">// 如果要获取ColorFactorBean实例，只需要在id前加上 &amp; 前缀</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">factoryBean</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;&amp;colorFactoryBean&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;factoryBean = &quot;</span> + factoryBean);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="使用注解注册Bean的方式"><a href="#使用注解注册Bean的方式" class="headerlink" title="使用注解注册Bean的方式"></a>使用注解注册Bean的方式</h4><ol><li><p>@Configuration + @Bean</p></li><li><p>@ComponentScan + @Component/@Controller/@Service/@Repository</p><ul><li>注册bean的排除规则</li><li>使用@Scope注解设置bean的作用域</li><li>使用@Lazy注解懒加载单例bean</li><li>使用@Conditional注解设置bean的注册条件</li></ul></li><li><p>@Import</p><ul><li><p>导入普通类</p></li><li><p>导入ImportSelector接口的实现类</p></li><li><p>导入ImportBeanDefinitionRegistrar接口的实现类</p></li></ul></li><li><p>@Configuration + @Bean + 实现FactoryBean接口</p><ul><li> isSingleton() 方法来设置bean是单例还是多例</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
      <category>ioc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lru算法设计与实现</title>
    <link href="/posts/lrucache-a352b759247b/"/>
    <url>/posts/lrucache-a352b759247b/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：主要介绍了LRU（Least Recently Used，最近最少使用）算法是什么、设计思路、基于Java语言的具体实现。</p><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>LRU（Least Recently Used，最近最少使用），是一种缓存数据淘汰策略。由于缓存有容量上限，当缓存写满后，有新的数据要放入缓存，则需要按照一定的策略淘汰掉缓存中原有的数据，这个策略就叫做<strong>缓存淘汰策略</strong>。常见的缓存淘汰策略有：FIFO（First Input First Output）、LRU、LFU（Least Frequently Used）等。</p><p>LRU的思想认为，最近被访问过的数据，在将来被访问的几率最大。</p><h3 id="LRU算法设计"><a href="#LRU算法设计" class="headerlink" title="LRU算法设计"></a>LRU算法设计</h3><hr><h4 id="LRU缓存要求"><a href="#LRU缓存要求" class="headerlink" title="LRU缓存要求"></a>LRU缓存要求</h4><ol><li>以正整数作为容量 capacity 初始化 LRU 缓存。</li><li>查找操作：如果关键字 key 存在于缓存中，则返回关键字的值，否则返回null 。</li><li>插入操作：如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该逐出最久未使用的关键字。</li><li>插入操作和查找操作的平均时间复杂度为O(1)。</li></ol><h4 id="LRU算法设计-1"><a href="#LRU算法设计-1" class="headerlink" title="LRU算法设计"></a>LRU算法设计</h4><ol><li>由于LRU缓存有容量限制，在put操作的时候需要先查看缓存是否已满，因此在初始化缓存时需要指定capacity和size分别记录缓存的容量和已经存放元素个数。</li><li>为了保证查找操作的平均时间复杂度为O(1)，可以使用HashMap来存放。</li><li>如果仅使用HashMap，淘汰元素时，就没法保证O(1)的时间复杂度。考虑到双向链表的队首和队尾的插入和删除操作都是O(1)的，因此本文选择使用HashMap配合双向链表来实现LRU缓存结构。</li></ol><h3 id="LRU算法实现——Java语言"><a href="#LRU算法实现——Java语言" class="headerlink" title="LRU算法实现——Java语言"></a>LRU算法实现——Java语言</h3><hr><h4 id="主要成员变量和方法"><a href="#主要成员变量和方法" class="headerlink" title="主要成员变量和方法"></a>主要成员变量和方法</h4><ol><li>首先定义一个Cache接口，在该接口中定义主要的方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.algorithm.lru;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-09 5:53 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cache</span>&lt;K, V&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取缓存中的数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向缓存中添加数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回缓存中存放元素个数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存是否为空</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清空缓存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>定义一个基于LRU算法的Cache接口的实现类LRUCache，在该类中实现具体方法，以及主要的成员变量。</li></ol><ul><li>由于LRUCache需要维护一个双端队列，因此定义一个Entry封装放入缓存中的数据，作为链表的节点</li><li>定义head和tail分别作为链表的头节点和尾节点，head是哑节点，不保存任何数据，其key和value始终为null</li><li>定义一个HashMap类型的cache，用于存放数据，其中key为数据的关键字，而value是链表的节点</li><li>capacity和size分别表示缓存的容量和放入数据的数量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.algorithm.lru;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-09 5:57 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span>&lt;K, V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span>&lt;K, V&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存容量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存中已经存放元素数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * head，双向链表的头节点</span><br><span class="hljs-comment">     * tail，双向链表的尾节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Entry head, tail;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来存放关键字k和关键字所对应的节点entry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> HashMap&lt;K, Entry&gt; cache;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 需要指定缓存容量的构造方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> capacity</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 内部类，用于将放入缓存中的数据k、v封装城双向链表的节点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;K&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K, V&gt; &#123;<br>        K key;<br>        V value;<br>        Entry&lt;K, V&gt; pre;<br>        Entry&lt;K, V&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Entry</span><span class="hljs-params">(K key, V value)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="具体方法实现详解"><a href="#具体方法实现详解" class="headerlink" title="具体方法实现详解"></a>具体方法实现详解</h4><ol><li>构造方法</li></ol><ul><li>初始容量应为正整数，否则抛出非法的参数异常</li><li>本类中的哈希表采用懒初始化，因此在构造方法中并没有初始化哈希表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需要指定缓存容量的构造方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> capacity</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (capacity &lt;= <span class="hljs-number">0</span>) <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;capacity不能小于1，capacity：&quot;</span> + capacity);<br>    <span class="hljs-built_in">this</span>.capacity = capacity;<br>    <span class="hljs-built_in">this</span>.size = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>get(K): V 操作</li></ol><ul><li>首先判断cache是否为null，如果cache为null，则缓存中没有数据，直接返回null</li><li>如果cache不为null，则根据key从cache中对应的entry</li><li>判断entry是否为null，如果为null，则关键字key对应的数据不存在，返回null</li><li>如果entry不为null，则判断该节点是否在队尾，如果不在队尾，则将该节点移到队尾<ul><li>将entry节点的前驱节点的后继节点指向entry节点的后继节点</li><li>将entry节点的后继节点的前驱节点指向entry节点的前驱节点</li><li>将entry节点的前驱节点指向队尾</li><li>将队尾的后继节点执行entry</li><li>将entry节点的后继节点置空</li><li>将tail指向entry，完成将entry移到队尾操纵</li></ul></li><li>最后返回数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> &#123;<br>    <span class="hljs-comment">// 如果cache为null，则缓存中没有数据，直接返回null</span><br>    <span class="hljs-keyword">if</span> (cache == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 否则，从cache中获取数据</span><br>    Entry&lt;K, V&gt; entry = cache.get(key);<br><br>    <span class="hljs-comment">// 判断entry是否为空，如果为空，则关键字key对应的数据不存在，返回null</span><br>    <span class="hljs-keyword">if</span> (entry == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 否则判断该节点是否在队尾，如果不在队尾，则将该节点移到队尾</span><br>    <span class="hljs-keyword">if</span> (entry != tail) &#123;<br>        entry.pre.next = entry.next;<br>        entry.next.pre = entry.pre;<br>        entry.pre = tail;<br>        tail.next = entry;<br>        entry.next = <span class="hljs-literal">null</span>;<br>        tail = entry;<br>    &#125;<br>    <span class="hljs-comment">// 返回entry中的value值</span><br>    <span class="hljs-keyword">return</span> entry.value;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>put(K, V): void</li></ol><ul><li>首先校验插入的数据是否为null，为null则直接抛出异常</li><li>判断cache是否初始化，如果没有初始化，则进行初始化</li><li>判断是否需要先进行淘汰：如果缓存已满且要插入的key不在缓存中，需要先进行淘汰<ul><li> 淘汰数据：</li><li>将队首元素移出队列：队首元素是head.next，而不是head，head是不保存数据的哑节点</li><li>从cache中删除数据</li><li>移出队首元素后，队列已存入的元素数量要减1</li></ul></li><li>插入数据：这里还要考虑到数据是否已经存在于缓存中<ul><li>如果不存在需要先根据key和value封装entry插入到队列队尾，并加入到cache中</li><li>如果存在，则需要更新value，并将对应的entry移动到队尾</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-comment">// 校验数据，如果为null则抛出异常</span><br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || value == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;key-value不能为null&quot;</span>);<br>    <span class="hljs-comment">// 判断cache是否初始化，如果没有初始化，则进行初始化</span><br>    <span class="hljs-keyword">if</span> (cache == <span class="hljs-literal">null</span>)<br>        initialCache();<br>    <span class="hljs-comment">// 判断是否需要先进行淘汰：如果缓存已满且要插入的key不在缓存中，需要先进行淘汰</span><br>    <span class="hljs-keyword">if</span> (size == capacity &amp;&amp; !cache.containsKey(key)) &#123;<br>        <span class="hljs-comment">// 淘汰数据</span><br>        <span class="hljs-comment">// 1. 将队首元素移出队列：队首元素是head.next，而不是head，head是不保存数据的哑节点</span><br>        <span class="hljs-comment">// 2. 从cache中删除数据</span><br>        head = head.next;<br>        <span class="hljs-keyword">if</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            cache.remove(head.key);<br>            head.key = <span class="hljs-literal">null</span>;<br>            head.value = <span class="hljs-literal">null</span>;<br>            head.pre = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 移出队首元素后，队列已存入的元素数量要减1</span><br>        size--;<br>    &#125;<br>    <span class="hljs-comment">// 插入数据：这里还要考虑到数据是否已经存在于缓存中</span><br>    <span class="hljs-comment">// 如果不存在需要先根据key和value封装entry插入到队列中，并加入到cache中</span><br>    <span class="hljs-comment">// 如果存在，则需要更新value，并将对应的entry移动到队尾</span><br>    <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; entry = cache.get(key);; ) &#123;<br>        <span class="hljs-keyword">if</span> (entry == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 封装entry，并加入到cache中</span><br>            entry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value);<br>            cache.put(key, entry);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (entry.pre == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 新创建的entry，直接加入到队尾</span><br>                tail.next = entry;<br>                entry.pre = tail;<br>                <span class="hljs-comment">// tail = entry; // 这一步由于不管是新加入entry还是更新entry都有，因此可以提取出来</span><br>                size++;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 更新entry</span><br>                entry.value = value;<br>                <span class="hljs-keyword">if</span> (entry != tail) &#123; <span class="hljs-comment">// 如果entry不在队尾，则移到队尾</span><br>                    entry.pre.next = entry.next;<br>                    entry.next.pre = entry.pre;<br>                    entry.pre = tail;<br>                    tail.next = entry;<br>                    entry.next = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-comment">// tail = entry; // 这一步由于不管是新加入entry还是更新entry都有，因此可以提取出来</span><br>                &#125;<br>            &#125;<br>            tail = entry;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化cache、head、tail</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialCache</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 初始化cache，直接指定cache大小，防止以后扩容影响性能</span><br>    cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(capacity);<br>    <span class="hljs-comment">// 初始化队列，head作为哑节点，不保存数据</span><br>    head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    tail = head;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>clear(): void</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 清空cache</span><br>    cache.clear();<br>    <span class="hljs-comment">// 清空队列</span><br>    head = <span class="hljs-literal">null</span>;<br>    tail = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 缓存中数据的数量置为0</span><br>    size = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>size(): int</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>isEmpty(): boolean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">return</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span>= <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shg.algorithm.lru;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: shg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-09 5:57 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span>&lt;K, V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span>&lt;K, V&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存容量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存中已经存放元素数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * head，双向链表的头节点</span><br><span class="hljs-comment">     * tail，双向链表的尾节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Entry head, tail;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来存放关键字k和关键字所对应的节点entry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> HashMap&lt;K, Entry&gt; cache;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 需要指定缓存容量的构造方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> capacity</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-keyword">if</span> (capacity &lt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;capacity不能小于1，capacity：&quot;</span> + capacity);<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>        <span class="hljs-built_in">this</span>.size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-comment">// 如果cache为null，则缓存中没有数据，直接返回null</span><br>        <span class="hljs-keyword">if</span> (cache == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 否则，从cache中获取数据</span><br>        Entry&lt;K, V&gt; entry = cache.get(key);<br><br>        <span class="hljs-comment">// 判断entry是否为空，如果为空，则关键字key对应的数据不存在，返回null</span><br>        <span class="hljs-keyword">if</span> (entry == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 否则判断该节点是否在队尾，如果不在队尾，则将该节点移到队尾</span><br>        <span class="hljs-keyword">if</span> (entry != tail) &#123;<br>            entry.pre.next = entry.next;<br>            entry.next.pre = entry.pre;<br>            entry.pre = tail;<br>            tail.next = entry;<br>            entry.next = <span class="hljs-literal">null</span>;<br>            tail = entry;<br>        &#125;<br>        <span class="hljs-comment">// 返回entry中的value值</span><br>        <span class="hljs-keyword">return</span> entry.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-comment">// 校验数据，如果为null则抛出异常</span><br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || value == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;key-value不能为null&quot;</span>);<br>        <span class="hljs-comment">// 判断cache是否初始化，如果没有初始化，则进行初始化</span><br>        <span class="hljs-keyword">if</span> (cache == <span class="hljs-literal">null</span>)<br>            initialCache();<br>        <span class="hljs-comment">// 判断是否需要先进行淘汰：如果缓存已满且要插入的key不在缓存中，需要先进行淘汰</span><br>        <span class="hljs-keyword">if</span> (size == capacity &amp;&amp; !cache.containsKey(key)) &#123;<br>            <span class="hljs-comment">// 淘汰数据</span><br>            <span class="hljs-comment">// 1. 将队首元素移出队列：队首元素是head.next，而不是head，head是不保存数据的哑节点</span><br>            <span class="hljs-comment">// 2. 从cache中删除数据</span><br>            head = head.next;<br>            <span class="hljs-keyword">if</span> (head != <span class="hljs-literal">null</span>) &#123;<br>                cache.remove(head.key);<br>                head.key = <span class="hljs-literal">null</span>;<br>                head.value = <span class="hljs-literal">null</span>;<br>                head.pre = <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">// 移出队首元素后，队列已存入的元素数量要减1</span><br>            size--;<br>        &#125;<br>        <span class="hljs-comment">// 插入数据：这里还要考虑到数据是否已经存在于缓存中</span><br>        <span class="hljs-comment">// 如果不存在需要先根据key和value封装entry插入到队列中，并加入到cache中</span><br>        <span class="hljs-comment">// 如果存在，则需要更新value，并将对应的entry移动到队尾</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; entry = cache.get(key);; ) &#123;<br>            <span class="hljs-keyword">if</span> (entry == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 封装entry，并加入到cache中</span><br>                entry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value);<br>                cache.put(key, entry);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (entry.pre == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 新创建的entry，直接加入到队尾</span><br>                    tail.next = entry;<br>                    entry.pre = tail;<br>                    <span class="hljs-comment">// tail = entry; // 这一步由于不管是新加入entry还是更新entry都有，因此可以提取出来</span><br>                    size++;<br>                &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 更新entry</span><br>                    entry.value = value;<br>                    <span class="hljs-keyword">if</span> (entry != tail) &#123; <span class="hljs-comment">// 如果entry不在队尾，则移到队尾</span><br>                        entry.pre.next = entry.next;<br>                        entry.next.pre = entry.pre;<br>                        entry.pre = tail;<br>                        tail.next = entry;<br>                        entry.next = <span class="hljs-literal">null</span>;<br>                        <span class="hljs-comment">// tail = entry; // 这一步由于不管是新加入entry还是更新entry都有，因此可以提取出来</span><br>                    &#125;<br>                &#125;<br>                tail = entry;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化cache、head、tail</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialCache</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 初始化cache，直接指定cache大小，防止以后扩容影响性能</span><br>        cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(capacity);<br>        <span class="hljs-comment">// 初始化队列，head作为哑节点，不保存数据</span><br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        tail = head;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span>= <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 清空cache</span><br>        cache.clear();<br>        <span class="hljs-comment">// 清空队列</span><br>        head = <span class="hljs-literal">null</span>;<br>        tail = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 缓存中数据的数量置为0</span><br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 内部类，用于将放入缓存中的数据k、v封装城双向链表的节点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;K&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K, V&gt; &#123;<br>        K key;<br>        V value;<br>        Entry&lt;K, V&gt; pre;<br>        Entry&lt;K, V&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Entry</span><span class="hljs-params">(K key, V value)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><h4 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h4><ol><li>并没有使用JDK内置的双端队列，而是通过内部类Entry来维护一个双端队列</li><li>内部维护了一个不保存任何数据的哑节点即head，这便于插入和移出节点操作</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/hello-world-37bdcda65ac8/"/>
    <url>/posts/hello-world-37bdcda65ac8/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
